using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using MySql.Data.MySqlClient;
using System.Data;

using dataUnit;
using LibStruct.MySql;
using LibStruct.pilipala;
using LibStruct.Interface;

namespace businessUnit
{
    namespace pilipala
    {
        /// <summary>
        /// 权限接口
        /// </summary>
        interface IPaRoot
        {
            /// <summary>
            /// Pala数据表所在数据库
            /// </summary>
            string dataBase { get; }
            /// <summary>
            /// 文本表
            /// </summary>
            PaRoot.Tables Tables { get; }
            /// <summary>
            /// 文本视图
            /// </summary>
            PaRoot.Views Views { get; }
            /// <summary>
            /// 数据库管理器实例
            /// </summary>
            MySqlConnH MySqlConnH { get; set; }
        }

        /// <summary>
        /// 权限控制器
        /// </summary>
        public class PaRoot
        {
            /// <summary>
            /// 
            /// </summary>
            public string dataBase { get; }
            /// <summary>
            /// 
            /// </summary>
            public Tables objTables { get; }
            /// <summary>
            /// 
            /// </summary>
            public Views objViews { get; }
            /// <summary>
            /// 
            /// </summary>
            public MySqlConnH MySqlConnH { get; set; }

            int root_id;/* 权限ID */

            /// <summary>
            /// 初始化PaRoot
            /// </summary>
            /// <parmm name="root_id">权限ID</parmm>
            /// <parmm name="PaDB">啪啦数据库信息</parmm>
            public PaRoot(int root_id, PaDB PaDB)
            {
                this.root_id = root_id;
                objTables = PaDB.Tables;
                objViews = PaDB.Views;
                dataBase = PaDB.dataBase;
                MySqlConnH = PaDB.MySqlConnH;
            }

            /// <summary>
            /// 获得权限数据
            /// </summary>
            /// <returns></returns>
            public PaUser getRoot()
            {
                try
                {
                    PaUser PaUser = new PaUser();/* 定义权限数据 */

                    string SQL = "CALL " + dataBase + ".`get_root`( ?root_id )";
                    List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                    {
                        new mysqlParm() { parmName = "?root_id", parmValue = root_id }
                    };

                    using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                    {
                        DataTable pala_root = MySqlConnH.getTable(MySqlCommand);

                        foreach (DataRow Row in pala_root.Rows)/* 遍历数据库表以取得唯一的数据行 */
                        {
                            PaUser.root_id = Convert.ToInt32(Row["root_id"]);
                            PaUser.root_definer = Convert.ToString(Row["root_definer"]);
                            PaUser.site_debug = Convert.ToBoolean(Row["site_debug"]);
                            PaUser.site_access = Convert.ToBoolean(Row["site_access"]);
                            PaUser.site_url = Convert.ToString(Row["site_url"]);
                            PaUser.site_title = Convert.ToString(Row["site_title"]);
                            PaUser.site_summary = Convert.ToString(Row["site_summary"]);
                        }
                        return PaUser;
                    }
                }
                finally
                {
                    MySqlConnH.closeHConnection();
                    MySqlConnH.nullHCommand();
                    MySqlConnH.disposeHCommand();
                }
            }

            /// <summary>
            /// 默认pala数据表
            /// </summary>
            private struct dftTables
            {
                public static string root = "pala_root";
                public static string text_index = "pala_text_index";
                public static string text_main = "pala_text_main";
                public static string text_sub = "pala_text_sub";
            }
            /// <summary>
            /// 默认pala数据视图
            /// </summary>
            private struct dftViews
            {
                public static string text_index = "view>index";
                public static string text_main = "view>main";
                public static string text_sub = "view>sub";
            }

            /// <summary>
            /// 自定义pala数据表
            /// </summary>
            public struct Tables
            {
                /// <summary>
                /// 初始化表名结构
                /// </summary>
                /// <parmm name="root"></parmm>
                /// <parmm name="text_index"></parmm>
                /// <parmm name="text_main"></parmm>
                /// <parmm name="text_sub"></parmm>
                public Tables(string root, string text_index, string text_main, string text_sub) : this()
                {
                    this.root = root;
                    this.text_index = text_index;
                    this.text_main = text_main;
                    this.text_sub = text_sub;
                }

                /// <summary>
                /// 
                /// </summary>
                public string root { get; set; }
                /// <summary>
                /// 
                /// </summary>
                public string text_index { get; set; }
                /// <summary>
                /// 
                /// </summary>
                public string text_main { get; set; }
                /// <summary>
                /// 
                /// </summary>
                public string text_sub { get; set; }
            }
            /// <summary>
            /// 自定义pala数据视图
            /// </summary>
            public struct Views
            {
                /// <summary>
                /// 初始化视图名结构
                /// </summary>
                /// <parmm name="text_main"></parmm>
                /// <parmm name="text_sub"></parmm>
                /// <parmm name="text_index_post"></parmm>
                /// <parmm name="text_index_page"></parmm>
                public Views(string text_index, string text_main, string text_sub) : this()
                {
                    this.text_index = text_index;
                    this.text_main = text_main;
                    this.text_sub = text_sub;
                }
                /// <summary>
                /// 
                /// </summary>
                public string text_index { get; set; }
                /// <summary>
                /// 
                /// </summary>
                public string text_main { get; set; }
                /// <summary>
                /// 
                /// </summary>
                public string text_sub { get; set; }
            }

            /// <summary>
            /// 以默认值定义表名（重载一::直接更改Tables）
            /// </summary>
            public static void defaultTables(ref Tables Tables)
            {
                Tables.root = dftTables.root;
                Tables.text_index = dftTables.text_index;
                Tables.text_main = dftTables.text_main;
                Tables.text_sub = dftTables.text_sub;
            }
            /// <summary>
            /// 以默认值定义视图名（重载一::直接更改Views）
            /// </summary>
            public static void defaultViews(ref Views Views)
            {
                Views.text_main = dftViews.text_main;
                Views.text_sub = dftViews.text_sub;

                Views.text_index = dftViews.text_index;
            }

            /// <summary>
            /// 以默认值定义表名（重载二::返回默认Tables）
            /// </summary>
            /// <returns></returns>
            public static Tables defaultTables()
            { return new Tables(dftTables.root, dftTables.text_index, dftTables.text_main, dftTables.text_sub); }
            /// <summary>
            /// 以默认值定义视图名（重载二::返回默认Views）
            /// </summary>
            /// <returns></returns>
            public static Views defaultViews()
            { return new Views(dftViews.text_index, dftViews.text_main, dftViews.text_sub); }
        }

        /// <summary>
        /// 文本列表控制接口
        /// </summary>
        interface ITextListH : IPaRoot
        {
            /// <summary>
            /// 获得全部文本ID列表
            /// </summary>
            /// <returns></returns>
            List<int> getTextIDList();
            /// <summary>
            /// 获得指定类型的文本ID列表
            /// </summary>
            /// <parmm name="text_type">自定义文本类型</parmm>
            /// <returns></returns>
            List<int> getTextIDList(string text_type);

            /// <summary>
            /// 获得全部文本ID列表(步进式)
            /// </summary>
            /// <parmm name="start">步进起始行（包含该行）</parmm>
            /// <parmm name="length">加载行数</parmm>
            /// <returns></returns>
            List<int> stepTextIDList(int start, int length);
            /// <summary>
            /// 获得指定类型的文本ID列表(步进式)
            /// </summary>
            /// <parmm name="start">步进起始行（包含该行）</parmm>
            /// <parmm name="length">加载行数</parmm>
            /// <parmm name="text_type">自定义文本类型</parmm>
            /// <returns></returns>
            List<int> stepTextIDList(int start, int length, string text_type);

            /// <summary>
            /// 文章标题(text_id)匹配器
            /// </summary>
            /// <param name="str">匹配文本</param>
            /// <returns>返回符合匹配文本的text_id集合</returns>
            List<int> matchTextTitle(string str);
            /// <summary>
            /// 文章标题(text_summary)匹配器
            /// </summary>
            /// <param name="str">匹配文本</param>
            /// <returns>返回符合匹配文本的text_id集合</returns>
            List<int> matchTextSummary(string str);
            /// <summary>
            /// 文章标题(text_content)匹配器
            /// </summary>
            /// <param name="str">匹配文本</param>
            /// <returns>返回符合匹配文本的text_id集合</returns>
            List<int> matchTextContent(string str);
        }
        /// <summary>
        /// 文本控制接口
        /// </summary>
        interface ITextH : IPaRoot
        {
            /// <summary>
            /// 获得符合text_id的文本主要数据
            /// </summary>
            /// <parmm name="text_id">文本序列号</parmm>
            /// <returns></returns>
            PaText getTextMain(int text_id);
            /// <summary>
            ///  获得符合text_id的文本次要数据
            /// </summary>
            /// <parmm name="text_id">文本序列号</parmm>
            /// <returns></returns>
            PaText getTextSub(int text_id);

            /// <summary>
            /// 取得当前文本 text_id 的下一个文本 text_id
            /// </summary>
            /// <parmm name="current_text_id">当前文本序列号</parmm>
            /// <returns>错误返回 -1</returns>
            int nextTextID(int current_text_id);
            /// <summary>
            /// 取得当前文本 text_id 的上一个文本 text_id
            /// </summary>
            /// <parmm name="current_text_id">当前文本序列号</parmm>
            /// <returns>错误返回 -1</returns>
            int prevTextID(int current_text_id);

            /// <summary>
            /// 随机获得文本ID(text_id)
            /// </summary>
            /// <parmm name="excluded_text_id">不参与随机操作的文本的text_id</parmm>
            /// <parmm name="text_type">自定义文本类型</parmm>
            /// <returns>错误返回 -1</returns>
            int rdmTextID(int excluded_text_id, string text_type);
        }

        namespace UI
        {
            /// <summary>
            /// 文本列表控制器
            /// </summary>
            public abstract class TextListH : ITextListH
            {
                /// <summary>
                /// 
                /// </summary>
                public string dataBase { get; }
                /// <summary>
                /// 
                /// </summary>
                public PaRoot.Tables Tables { get; }
                /// <summary>
                /// 
                /// </summary>
                public PaRoot.Views Views { get; }
                /// <summary>
                /// 
                /// </summary>
                public MySqlConnH MySqlConnH { get; set; }

                /// <summary>
                /// 初始化TextListH
                /// </summary>
                /// <parmm name="PaDB">啪啦数据库信息</parmm>
                public TextListH(PaDB PaDB)
                {
                    dataBase = PaDB.dataBase;
                    Tables = PaDB.Tables;
                    Views = PaDB.Views;
                    MySqlConnH = PaDB.MySqlConnH;
                }


                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual List<int> getTextIDList()
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        using (DataTable text_id_table
                            = MySqlConnH.getTable("SELECT text_id FROM " + dataBase + ".`" + Views.text_index + "`"))
                        {
                            foreach (DataRow Row in text_id_table.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                List_text_id.Add(Convert.ToInt32(Row["text_id"]));/* 每次循环完成，将获取到的文本数据添加至文本列表 */
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual List<int> getTextIDList(string text_type)
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        string SQL = "SELECT text_id FROM " + dataBase + ".`" + Views.text_index + "` WHERE text_type=?text_type";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?text_type", parmValue = text_type },
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable text_id_table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in text_id_table.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                List_text_id.Add(Convert.ToInt32(Row["text_id"]));/* 每次循环完成，将获取到的文本数据添加至文本列表 */
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual List<int> stepTextIDList(int start, int length)
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        string SQL = "SELECT `" +
                                     Views.text_index + "`.text_id" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index +
                                     "` LIMIT " +
                                     "?start , ?length";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?start", parmValue = start },
                            new mysqlParm() { parmName = "?length", parmValue = length }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable pala_text_index = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in pala_text_index.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                List_text_id.Add(Convert.ToInt32(Row["text_id"]));/* 每次循环完成，将获取到的文本数据添加至文本列表 */
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual List<int> stepTextIDList(int start, int length, string text_type)
                {
                    try
                    {
                        string SQL = "SELECT `" +
                                     Views.text_index + "`.text_id" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index +
                                     "` WHERE " +
                                     "text_type = ?text_type" +
                                     " LIMIT " +
                                     "?start , ?length";

                        List<int> List_text_id = new List<int>();

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>
                        {
                            new mysqlParm() { parmName = "?text_type", parmValue = text_type },
                            new mysqlParm() { parmName = "?start", parmValue = start },
                            new mysqlParm() { parmName = "?length", parmValue = length }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))
                        {
                            DataTable pala_text_index = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in pala_text_index.Rows)
                            {
                                List_text_id.Add(Convert.ToInt32(Row["text_id"]));
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// 获得站点地图(由text_id和text_title构成的集合)
                /// </summary>
                public virtual List<PaText> getTextMap()
                {
                    try
                    {
                        string SQL =
                            "SELECT " +
                            "`" + Views.text_main + "`.text_id," +
                            "`" + Views.text_main + "`.text_title" +
                            " FROM " +
                            dataBase + ".`" + Views.text_index + "`," +
                            dataBase + ".`" + Views.text_main + "`" +
                            " WHERE `" +
                            Views.text_main + "`.text_id=`" + Views.text_index + "`.text_id";

                        List<PaText> List_PaText = new List<PaText>();

                        using (DataTable pala_text_index = MySqlConnH.getTable(SQL))
                        {
                            foreach (DataRow Row in pala_text_index.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                PaText PaText = new PaText
                                {
                                    text_id = Convert.ToInt32(Row["text_id"]),
                                    text_type = Convert.ToString(Row["text_title"])
                                };
                                List_PaText.Add(PaText);/* 每次循环完成，将获取到的文本数据添加至文本列表 */
                            }
                        }
                        return List_PaText;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// 文章匹配器
                /// </summary>
                /// <typeparmm name="T">继承自ITextBasic的类型</typeparmm>
                /// <parmm name="obj">继承自ITextBasic的对象实例</parmm>
                /// <returns></returns>
                public virtual List<int> matchText<T>(T obj) where T : ITextBasic
                {
                    if (typeof(T) == typeof(TextTitle))
                    {
                        return matchTextTitle(obj.innerText);
                    }
                    else if (typeof(T) == typeof(TextSummary))
                    {
                        return matchTextSummary(obj.innerText);
                    }
                    else if (typeof(T) == typeof(TextContent))
                    {
                        return matchTextContent(obj.innerText);
                    }
                    else
                    {
                        return null;
                    }
                }
                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual List<int> matchTextTitle(string str)
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        string SQL = "CALL " + dataBase + ".`match<main.title`( ?str )";
                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>
                        {
                            new mysqlParm() { parmName = "?str", parmValue = str }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in table.Rows)
                            {
                                int text_id = Convert.ToInt32(Row["text_id"]);

                                List_text_id.Add(text_id);
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual List<int> matchTextSummary(string str)
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        string SQL = "CALL " + dataBase + ".`match<main.summary`( ?str )";
                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>
                        {
                            new mysqlParm() { parmName = "?str", parmValue = str }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in table.Rows)
                            {
                                int text_id = Convert.ToInt32(Row["text_id"]);

                                List_text_id.Add(text_id);
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual List<int> matchTextContent(string str)
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        string SQL = "CALL " + dataBase + ".`match<main.content`( ?str )";
                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>
                        {
                            new mysqlParm() { parmName = "?str", parmValue = str }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in table.Rows)
                            {
                                int text_id = Convert.ToInt32(Row["text_id"]);

                                List_text_id.Add(text_id);
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// 获取文章排行(无截止长度)
                /// </summary>
                /// <param name="key">键名</param>
                /// <param name="orderType">asc(升序)或desc(降序)</param>
                /// <returns></returns>
                public virtual List<int> getTextIDList_OrderBy(string key, string orderType)
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        string SQL = "SELECT text_id FROM " + dataBase + ".`" + Views.text_sub + "` ORDER BY ?key ?orderType";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>
                        {
                            new mysqlParm() { parmName = "?key", parmValue = key },
                            new mysqlParm() { parmName = "?orderType", parmValue = orderType },
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))
                        {
                            DataTable text_id_table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in text_id_table.Rows)
                            {
                                List_text_id.Add(Convert.ToInt32(Row["text_id"]));
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 获取热度文章排行(有截止长度)
                /// </summary>
                /// <param name="key">键名</param>
                /// <param name="orderType">asc(升序)或desc(降序)</param>
                /// <param name="length">截止长度</param>
                /// <returns></returns>
                public virtual List<int> getTextIDList_OrderBy(string key, string orderType, int length)
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        string SQL = "SELECT text_id FROM " + dataBase + ".`" + Views.text_sub + "` ORDER BY ?key ?orderType LIMIT 0,?length";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>
                        {

                            new mysqlParm() { parmName = "?key", parmValue = key },
                            new mysqlParm() { parmName = "?orderType", parmValue = orderType },
                            new mysqlParm() { parmName = "?length", parmValue = length }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))
                        {
                            DataTable text_id_table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in text_id_table.Rows)
                            {
                                List_text_id.Add(Convert.ToInt32(Row["text_id"]));
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
            }

            /// <summary>
            /// 文本控制器
            /// </summary>
            public abstract class TextH : ITextH
            {
                /// <summary>
                /// 
                /// </summary>
                public string dataBase { get; }
                /// <summary>
                /// 
                /// </summary>
                public PaRoot.Tables Tables { get; }
                /// <summary>
                /// 
                /// </summary>
                public PaRoot.Views Views { get; }
                /// <summary>
                /// 
                /// </summary>
                public MySqlConnH MySqlConnH { get; set; }

                /// <summary>
                /// 初始化TextH
                /// </summary>
                /// <parmm name="PaDB">啪啦数据库信息</parmm>
                public TextH(PaDB PaDB)
                {
                    dataBase = PaDB.dataBase;
                    Tables = PaDB.Tables;
                    Views = PaDB.Views;
                    MySqlConnH = PaDB.MySqlConnH;
                }


                /// <summary>
                /// ITextH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual PaText getTextMain(int text_id)
                {
                    try
                    {
                        PaText PaText = new PaText();

                        string SQL = "CALL " + dataBase + ".`get>main`( ?text_id )";
                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable pala_text_main = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in pala_text_main.Rows)/* 遍历数据库表以取得唯一的数据行 */
                            {
                                PaText.text_id = Convert.ToInt32(Row["text_id"]);
                                PaText.text_title = Convert.ToString(Row["text_title"]);
                                PaText.text_summary = Convert.ToString(Row["text_summary"]);
                                PaText.text_content = Convert.ToString(Row["text_content"]);
                            }
                            return PaText;
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 取得Main表的一个键值
                /// </summary>
                /// <param name="text_id">文章序列号</param>
                /// <param name="keyName">键名</param>
                /// <returns></returns>
                public virtual string getTextMain(int text_id, string keyName)
                {
                    try
                    {
                        string SQL = "SELECT " +
                                     "`" + Views.text_sub + "`.?keyName" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index + "`," +
                                     dataBase + ".`" + Views.text_main + "`" +
                                     " WHERE `" +
                                     Views.text_index + "`.text_id =`" + Views.text_main + "`.text_id" +
                                     " AND `" +
                                     Views.text_main + "`.text_id = ?text_id";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?keyName", parmValue = keyName },
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in table.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                return Convert.ToString(Convert.ToInt32(Row[keyName]));
                            }
                            return null;
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// ITextH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual PaText getTextSub(int text_id)
                {
                    try
                    {
                        PaText PaText = new PaText();

                        string SQL = "CALL " + dataBase + ".`get>sub`( ?text_id )";
                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable pala_text_sub = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in pala_text_sub.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                PaText.text_id = Convert.ToInt32(Row["text_id"]);
                                PaText.text_archiv = Convert.ToString(Row["text_archiv"]);
                                PaText.text_editor = Convert.ToString(Row["text_editor"]);

                                PaText.date_created = Convert.ToDateTime(Row["date_created"]);
                                PaText.date_changed = Convert.ToDateTime(Row["date_changed"]);

                                PaText.count_pv = Convert.ToInt32(Row["count_pv"]);
                                PaText.count_comment = Convert.ToInt32(Row["count_comment"]);
                                PaText.count_star = Convert.ToInt32(Row["count_star"]);

                                PaText.tags = Convert.ToString(Row["tags"]);
                                PaText.cover_url = Convert.ToString(Row["cover_url"]);
                            }
                            return PaText;
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 取得Sub表的一个键值
                /// </summary>
                /// <param name="text_id">文章序列号</param>
                /// <param name="keyName">键名</param>
                /// <returns></returns>
                public virtual string getTextSub(int text_id, string keyName)
                {
                    try
                    {
                        string SQL = "SELECT " +
                                     "`" + Views.text_sub + "`.?keyName" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index + "`," +
                                     dataBase + ".`" + Views.text_sub + "`" +
                                     " WHERE `" +
                                     Views.text_index + "`.text_id =`" + Views.text_sub + "`.text_id" +
                                     " AND `" +
                                     Views.text_sub + "`.text_id = ?text_id";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?keyName", parmValue = keyName },
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in table.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                return Convert.ToString(Convert.ToInt32(Row[keyName]));
                            }
                            return null;
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// 取得文本标题(text_title)
                /// </summary>
                /// <param name="text_id">文本序列号</param>
                /// <returns></returns>
                public virtual string getTextTitle(int text_id)
                {
                    try
                    {
                        string SQL = "SELECT " +
                                     "`" + Views.text_main + "`.text_title" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index + "`," +
                                     dataBase + ".`" + Views.text_main + "`" +
                                     " WHERE `" +
                                     Views.text_index + "`.text_id =`" + Views.text_main + "`.text_id" +
                                     " AND `" +
                                     Views.text_main + "`.text_id = ?text_id";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                            {
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                            };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in table.Rows)/* 遍历数据库表以取得唯一的数据行 */
                            {
                                return Convert.ToString(Row["text_title"]);
                            }
                        }
                        return null;
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 取得文本概要(text_summary)
                /// </summary>
                /// <param name="text_id">文本序列号</param>
                /// <returns></returns>
                public virtual string getTextSummary(int text_id)
                {
                    try
                    {
                        string SQL = "SELECT " +
                                     "`" + Views.text_main + "`.text_summary" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index + "`," +
                                     dataBase + ".`" + Views.text_main + "`" +
                                     " WHERE `" +
                                     Views.text_index + "`.text_id =`" + Views.text_main + "`.text_id" +
                                     " AND `" +
                                     Views.text_main + "`.text_id = ?text_id";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                            {
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                            };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in table.Rows)/* 遍历数据库表以取得唯一的数据行 */
                            {
                                return Convert.ToString(Row["text_summary"]);
                            }
                        }
                        return null;
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 取得文本正文(text_content)
                /// </summary>
                /// <param name="text_id">文本序列号</param>
                /// <returns></returns>
                public virtual string getTextContent(int text_id)
                {
                    try
                    {
                        string SQL = "SELECT " +
                                     "`" + Views.text_main + "`.text_content" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index + "`," +
                                     dataBase + ".`" + Views.text_main + "`" +
                                     " WHERE `" +
                                      Views.text_index + "`.text_id =`" + Views.text_main + "`.text_id" +
                                     " AND `" +
                                     Views.text_main + "`.text_id = ?text_id";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                            {
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                            };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in table.Rows)/* 遍历数据库表以取得唯一的数据行 */
                            {
                                return Convert.ToString(Row["text_content"]);
                            }
                        }
                        return null;
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// ITextH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual int nextTextID(int current_text_id)
                {
                    try
                    {
                        /* 取得比当前 text_id 大的一行，实现对下一条数据的抓取 */
                        string SQL = "SELECT *" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index +
                                     "` WHERE " +
                                     "text_id = (SELECT min(text_id) FROM " + dataBase + ".`" + Views.text_index + "` WHERE text_id > ?current_text_id);";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?current_text_id", parmValue = current_text_id }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            foreach (DataRow Row in MySqlConnH.getTable(MySqlCommand).Rows)/* 遍历查询到的表以取得唯一的数据行 */
                            {
                                return Convert.ToInt32(Row["text_id"]);/* 直接返回该text_id */
                            }
                            return -1;/* 错误返回-1 */
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// ITextH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual int prevTextID(int current_text_id)
                {
                    try
                    {
                        /* 取得比当前 text_id 小的一行，实现对上一条数据的抓取 */
                        string SQL = "SELECT *" +
                                     " FROM " +
                                     dataBase + ".`" + Views.text_index +
                                     "` WHERE " +
                                     "text_id = (SELECT max(text_id) FROM " + dataBase + ".`" + Views.text_index + "` WHERE text_id < ?current_text_id);";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?current_text_id", parmValue = current_text_id }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            foreach (DataRow Row in MySqlConnH.getTable(MySqlCommand).Rows)/* 遍历查询到的表以取得唯一的数据行 */
                            {
                                return Convert.ToInt32(Row["text_id"]);/* 直接返回该text_id */
                            }
                            return -1;/* 错误返回-1 */
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// ITextH接口的基础实现，详见其接口注释
                /// </summary>
                public virtual int rdmTextID(int excluded_text_id, string text_type)
                {
                    try
                    {
                        string SQL = "CALL " + dataBase + ".`random>index`( ?excluded_text_id , ?text_type )";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?excluded_text_id", parmValue = excluded_text_id },
                            new mysqlParm() { parmName = "?text_type", parmValue = text_type }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable pala_text_main = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in pala_text_main.Rows)/* 遍历数据库表以取得唯一的数据行 */
                            {
                                return Convert.ToInt32(Row["text_id"]);
                            }
                            return -1;
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }


                #region 抽象类

                /// <summary>
                /// 文章更改器
                /// </summary>
                public abstract bool updateTextBasic<T>(T obj) where T : ITextBasic;
                /// <summary>
                /// 更改文章标题(text_title)
                /// </summary>
                public abstract bool updateTextTitle(int text_id, string text_title);
                /// <summary>
                /// 更改文章概要(text_summary)
                /// </summary>
                public abstract bool updateTextSummary(int text_id, string text_summary);
                /// <summary>
                /// 更改文章内容(text_content)
                /// </summary>
                public abstract bool updateTextContent(int text_id, string text_content);
                /// <summary>
                /// 设置浏览计数(count_pv)
                /// </summary>
                public abstract bool update_countPv(int text_id, int value);
                /// <summary>
                /// 设置星星计数(count_star)
                /// </summary>
                public abstract bool update_countStar(int text_id, int value);

                #endregion
            }
        }

        namespace Edit
        {
            /// <summary>
            /// 文本列表控制器
            /// </summary>
            public class TextListH : UI.TextListH
            {
                /// <summary>
                /// 初始化TextListH
                /// </summary>
                /// <parmm name="PaDB">啪啦数据库信息</parmm>
                public TextListH(PaDB PaDB) : base(PaDB) { }


                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public new List<int> getTextIDList()
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        using (DataTable text_id_table
                            = MySqlConnH.getTable("SELECT text_id FROM " + dataBase + "." + Tables.text_index))
                        {
                            foreach (DataRow Row in text_id_table.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                List_text_id.Add(Convert.ToInt32(Row["text_id"]));/* 每次循环完成，将获取到的文本数据添加至文本列表 */
                            }
                        }
                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// ITextListH接口的基础实现，详见其接口注释
                /// </summary>
                public new List<int> getTextIDList(string text_type)
                {
                    try
                    {
                        List<int> List_text_id = new List<int>();

                        string SQL = "SELECT text_id FROM " + dataBase + "." + Tables.text_index + " WHERE text_type=?text_type";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?text_type", parmValue = text_type },
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable text_id_table = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in text_id_table.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                List_text_id.Add(Convert.ToInt32(Row["text_id"]));/* 每次循环完成，将获取到的文本数据添加至文本列表 */
                            }
                        }

                        return List_text_id;
                    }
                    finally
                    {
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
            }

            /// <summary>
            /// 文本控制器
            /// 方法注释参见ITextH接口
            /// </summary>
            public class TextH : UI.TextH
            {
                /// <summary>
                /// 初始化TextH
                /// </summary>
                /// <parmm name="PaDB">啪啦数据库信息</parmm>
                public TextH(PaDB PaDB) : base(PaDB) { }


                /// <summary>
                /// 获得符合text_id的且在展示文本主要数据，无论展示与否
                /// </summary>
                public new PaText getTextMain(int text_id)
                {
                    try
                    {
                        PaText PaText = new PaText();

                        string SQL = "SELECT * FROM " + dataBase + "." + Tables.text_main + " WHERE text_id = ?text_id";
                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable pala_text_main = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in pala_text_main.Rows)/* 遍历数据库表以取得唯一的数据行 */
                            {
                                PaText.text_id = Convert.ToInt32(Row["text_id"]);
                                PaText.text_title = Convert.ToString(Row["text_title"]);
                                PaText.text_summary = Convert.ToString(Row["text_summary"]);
                                PaText.text_content = Convert.ToString(Row["text_content"]);
                            }
                            return PaText;
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 获得符合text_id的且在展示文本次要数据，无论展示与否
                /// </summary>
                public new PaText getTextSub(int text_id)
                {
                    try
                    {
                        PaText PaText = new PaText();

                        string SQL = "SELECT * FROM " + dataBase + "." + Tables.text_sub + " WHERE text_id = ?text_id";

                        List<mysqlParm> List_mysqlParm = new List<mysqlParm>/* 为参数化查询添加元素 */
                        {
                            new mysqlParm() { parmName = "?text_id", parmValue = text_id }
                        };

                        using (MySqlCommand MySqlCommand = MySqlConnH.parmQueryCmd(SQL, List_mysqlParm))/* 参数化查询 */
                        {
                            DataTable pala_text_main = MySqlConnH.getTable(MySqlCommand);

                            foreach (DataRow Row in pala_text_main.Rows)/* 遍历数据库表行，逐行取得数据 */
                            {
                                PaText.text_id = Convert.ToInt32(Row["text_id"]);
                                PaText.text_archiv = Convert.ToString(Row["text_archiv"]);
                                PaText.text_editor = Convert.ToString(Row["text_editor"]);

                                PaText.date_created = Convert.ToDateTime(Row["date_created"]);
                                PaText.date_changed = Convert.ToDateTime(Row["date_changed"]);

                                PaText.count_pv = Convert.ToInt32(Row["count_pv"]);
                                PaText.count_comment = Convert.ToInt32(Row["count_comment"]);
                                PaText.count_star = Convert.ToInt32(Row["count_star"]);

                                PaText.tags = Convert.ToString(Row["tags"]);
                                PaText.cover_url = Convert.ToString(Row["cover_url"]);
                            }
                            return PaText;
                        }
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// 文章更改器
                /// </summary>
                /// <typeparam name="T">继承自ITextBasic的类型</typeparam>
                /// <param name="obj">继承自ITextBasic的对象实例</param>
                /// <returns></returns>
                public override bool updateTextBasic<T>(T obj)
                {
                    if (typeof(T) == typeof(TextTitle))
                    {
                        return updateTextTitle(obj.text_id, obj.innerText);
                    }
                    else if (typeof(T) == typeof(TextSummary))
                    {
                        return updateTextSummary(obj.text_id, obj.innerText);
                    }
                    else if (typeof(T) == typeof(TextContent))
                    {
                        return updateTextContent(obj.text_id, obj.innerText);
                    }
                    else
                    {
                        return false;
                    }
                }
                /// <summary>
                /// 更改文章标题(text_title)
                /// </summary>
                /// <param name="text_id">文章序列号</param>
                /// <param name="text_title">新标题</param>
                /// <returns></returns>
                public override bool updateTextTitle(int text_id, string text_title)
                {
                    try
                    {
                        //初始化键定位
                        mysqlKey mysqlKey = new mysqlKey
                        {
                            dataBase = dataBase,
                            table = Tables.text_main,
                            primaryKeyName = "text_id",
                            primaryKeyValue = text_id.ToString()
                        };
                        return MySqlConnH.setColumnValue(mysqlKey, "text_title", text_title.ToString());
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 更改文章概要(text_summary)
                /// </summary>
                /// <param name="text_id">文章序列号</param>
                /// <param name="text_summary">新概要</param>
                /// <returns></returns>
                public override bool updateTextSummary(int text_id, string text_summary)
                {
                    try
                    {
                        mysqlKey mysqlKey = new mysqlKey
                        {
                            dataBase = dataBase,
                            table = Tables.text_main,
                            primaryKeyName = "text_id",
                            primaryKeyValue = text_id.ToString()
                        };
                        return MySqlConnH.setColumnValue(mysqlKey, "text_summary", text_summary.ToString());
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 更改文章内容(text_content)
                /// </summary>
                /// <param name="text_id">文章序列号</param>
                /// <param name="text_content">新内容</param>
                /// <returns></returns>
                public override bool updateTextContent(int text_id, string text_content)
                {
                    try
                    {
                        mysqlKey mysqlKey = new mysqlKey
                        {
                            dataBase = dataBase,
                            table = Tables.text_main,
                            primaryKeyName = "text_id",
                            primaryKeyValue = text_id.ToString()
                        };
                        return MySqlConnH.setColumnValue(mysqlKey, "text_content", text_content.ToString());
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }

                /// <summary>
                /// 设置浏览计数(count_pv)
                /// </summary>
                /// <parmm name="text_id">文本ID</parmm>
                /// <parmm name="value">值</parmm>
                /// <returns></returns>
                public override bool update_countPv(int text_id, int value)
                {
                    try
                    {
                        //初始化键定位
                        mysqlKey mysqlKey = new mysqlKey
                        {
                            dataBase = dataBase,
                            table = Tables.text_sub,
                            primaryKeyName = "text_id",
                            primaryKeyValue = text_id.ToString()
                        };
                        return MySqlConnH.setColumnValue(mysqlKey, "count_pv", value.ToString());
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
                /// <summary>
                /// 设置星星计数(count_star)
                /// </summary>
                /// <parmm name="text_id">文本ID</parmm>
                /// <parmm name="value">值</parmm>
                /// <returns></returns>
                public override bool update_countStar(int text_id, int value)
                {
                    try
                    {
                        mysqlKey mysqlKey = new mysqlKey
                        {
                            dataBase = dataBase,
                            table = Tables.text_sub,
                            primaryKeyName = "text_id",
                            primaryKeyValue = text_id.ToString()
                        };
                        return MySqlConnH.setColumnValue(mysqlKey, "count_star", value.ToString());
                    }
                    finally
                    {
                        MySqlConnH.closeHConnection();
                        MySqlConnH.nullHCommand();
                        MySqlConnH.disposeHCommand();
                    }
                }
            }
        }

        /// <summary>
        /// 啪啦函数
        /// </summary>
        public class PaFn
        {
            /// <summary>
            /// 合并主副表PaText数据
            /// </summary>
            /// <parmm name="TextMain">主表PaText</parmm>
            /// <parmm name="TextSub">副表PaText</parmm>
            /// <returns></returns>
            public static PaText fill(PaText TextMain, PaText TextSub)
            {
                return new PaText
                {
                    /* 主表数据填充 */
                    text_id = TextMain.text_id,
                    text_title = TextMain.text_title,
                    text_summary = TextMain.text_summary,
                    text_content = TextMain.text_content,

                    /* 副表数据填充 */
                    text_archiv = TextSub.text_archiv,
                    text_editor = TextSub.text_editor,
                    date_created = TextSub.date_created,
                    date_changed = TextSub.date_changed,
                    count_pv = TextSub.count_pv,
                    count_comment = TextSub.count_comment,
                    count_star = TextSub.count_star,
                    tags = TextSub.tags,
                    cover_url = TextSub.cover_url,
                };
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.IO;
using System.Xml;
using MySql.Data.MySqlClient;
using System.Data;

using LibStruct;
using LibStruct.MySql;

namespace dataUnit
{
    /// <summary>
    /// xml管理器
    /// </summary>
    public class XmlH
    {
        //xml文档地址，默认为运行目录的"StdLibx.xml"
        private string xpath = Directory.GetCurrentDirectory() + @"\StdLibx.xml";
        static XmlDocument xDoc = new XmlDocument();

        /// <summary>
        /// 指定流的方法
        /// </summary>
        /// <param name="xStream">文件流地址</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool reStream(string xStream)
        {
            try
            {
                xpath = xStream;
                xDoc.Load(xpath);
                return true;
            }
            catch
            {
                return false;
            }
        }


        /// <summary>
        /// 创建Xml文档的方法（重载一）
        /// </summary>
        /// <param name="fileName">Xml文档被创建的目录</param>
        /// <param name="xmlName">Xml文档名</param>
        /// <param name="rootName">根节点名</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool createXml(string fileName, string xmlName, string rootName)
        {
            try
            {
                XmlDocument newDoc = new XmlDocument();//doc模式读写
                XmlNode node_xml = newDoc.CreateXmlDeclaration("1.0", "utf-8", "");
                newDoc.AppendChild(node_xml);
                XmlNode root = newDoc.CreateElement(rootName);//创建根节点
                newDoc.AppendChild(root);//添加根节点

                newDoc.Save(fileName + @"\" + xmlName + ".xml");
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 创建Xml文档的方法（重载二）
        /// </summary>
        /// <param name="XmlSign">Xml文档信息通用结构体</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool createXml(XmlSign XmlSign)
        {
            try
            {
                XmlDocument newDoc = new XmlDocument();//doc模式读写
                XmlNode node_xml = newDoc.CreateXmlDeclaration("1.0", "utf-8", "");
                newDoc.AppendChild(node_xml);
                XmlNode root = newDoc.CreateElement(XmlSign.rootName);//创建根节点
                newDoc.AppendChild(root);//添加根节点

                newDoc.Save(XmlSign.fileName + @"\" + XmlSign.xmlName + ".xml");
                return true;
            }
            catch
            {
                return false;
            }
        }


        /// <summary>
        /// 添加实节点的方法（重载一）
        /// </summary>
        /// <param name="path">被指定的父节点</param>
        /// <param name="nodeName">新建的节点名</param>
        /// <param name="attName">节点的属性</param>
        /// <param name="attValue">节点的属性值</param>
        /// <param name="innerText">节点的子文本</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool addRealNode(string path, string nodeName, string attName, string attValue, string innerText)
        {
            try
            {
                XmlNode parentNode = xDoc.SelectSingleNode(path);//父节点指定
                XmlNode newNode = xDoc.CreateElement(nodeName);//创建新的子节点
                XmlAttribute newAtt = xDoc.CreateAttribute(attName);//创建用于新的子节点的一个属性

                newAtt.Value = attValue;//属性的值指定
                newNode.Attributes.Append(newAtt);//添加属性到节点

                newNode.InnerText = innerText;

                parentNode.AppendChild(newNode);//在父节点上添加该节点
                xDoc.Save(xpath);//保存到xpath
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 添加实节点的方法（重载二）
        /// </summary>
        /// <param name="XmlSign">Xml文档信息通用结构体</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool addRealNode(XmlSign XmlSign)
        {
            try
            {
                XmlNode parentNode = xDoc.SelectSingleNode(XmlSign.path);//父节点指定
                XmlNode newNode = xDoc.CreateElement(XmlSign.nodeName);//创建新的子节点
                XmlAttribute newAtt = xDoc.CreateAttribute(XmlSign.attName);//创建用于新的子节点的一个属性

                newAtt.Value = XmlSign.attValue;//属性的值指定
                newNode.Attributes.Append(newAtt);//添加属性到节点

                newNode.InnerText = XmlSign.innerText;

                parentNode.AppendChild(newNode);//在父节点上添加该节点
                xDoc.Save(xpath);//保存到xpath
                return true;
            }
            catch
            {
                return false;
            }
        }


        /// <summary>
        /// 添加空节点的方法（重载一）
        /// </summary>
        /// <param name="path">被指定的父节点</param>
        /// <param name="nodeName">新建的空节点名</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool addEmptyNode(string path, string nodeName)
        {
            try
            {
                XmlNode pxn = xDoc.SelectSingleNode(path);
                XmlNode nxn = xDoc.CreateElement(nodeName);
                pxn.AppendChild(nxn);
                xDoc.Save(xpath);
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 添加空节点的方法（重载二）
        /// </summary>
        /// <param name="XmlSign">Xml文档信息通用结构体</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool addEmptyNode(XmlSign XmlSign)
        {
            try
            {
                XmlNode Pxn = xDoc.SelectSingleNode(XmlSign.path);
                XmlNode Cxn = xDoc.CreateElement(XmlSign.nodeName);
                Pxn.AppendChild(Cxn);
                xDoc.Save(xpath);
                return true;
            }
            catch
            {
                return false;
            }
        }


        /// <summary>
        /// 删除被指定的父节点下子节点的方法（重载一）
        /// </summary>
        /// <param name="path">被指定的父节点</param>
        /// <param name="nodeName">被删的子节点名</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool removeNode(string path, string nodeName)
        {
            try
            {
                XmlNode baseNode = xDoc.SelectSingleNode(path);//指定父节点
                XmlNodeList xnList = baseNode.ChildNodes;//初始化父节点的子节点列
                foreach (XmlNode n in xnList)//遍历每一个节点
                {
                    if (n.Name == nodeName)//判断节点名
                    {
                        baseNode.RemoveChild(n);

                        xDoc.Save(xpath);
                        break;
                    }
                }
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 删除被指定的父节点下子节点的方法（重载二）
        /// </summary>
        /// <param name="XmlSign">Xml文档信息通用结构体</param>
        /// <returns>通常返回true，报错则返回false</returns>
        public bool removeNode(XmlSign XmlSign)
        {
            try
            {
                XmlNode baseNode = xDoc.SelectSingleNode(XmlSign.path);//指定父节点
                XmlNodeList xnList = baseNode.ChildNodes;//初始化父节点的子节点列
                foreach (XmlNode n in xnList)//遍历每一个节点
                {
                    if (n.Name == XmlSign.nodeName)//判断节点名
                    {
                        baseNode.RemoveChild(n);

                        xDoc.Save(xpath);
                        break;
                    }
                }
                return true;
            }
            catch
            {
                return false;
            }
        }


        /// <summary>
        /// 读取被指定的实节点的信息的方法（重载一）
        /// </summary>
        /// <param name="path">被指定的实节点</param>
        /// <param name="type">被读取的信息类型</param>
        /// <returns>通常返回被读取的信息，传递未知的type返回"UnknownReadingType"，报错则返回null</returns>
        public string readInformation(string path, string type)
        {
            try
            {
                XmlNode xn = xDoc.SelectSingleNode(path);
                switch (type)
                {
                    case "_name":
                        return xn.Name;
                    case "_value":
                        return xn.InnerText;
                    default:
                        return "UnknownReadingType";
                }
            }
            catch
            {
                return null;
            }
        }
        /// <summary>
        /// 读取被指定的实节点的信息的方法（重载二）
        /// </summary>
        /// <param name="XmlSign">Xml文档信息通用结构体</param>
        /// <returns>通常返回被读取的信息，传递未知的type返回"UnknownReadingType"，报错则返回null</returns>
        public string readInformation(XmlSign XmlSign)
        {
            try
            {
                XmlNode xn = xDoc.SelectSingleNode(XmlSign.path);
                switch (XmlSign.type)
                {
                    case "_name":
                        return xn.Name;
                    case "_value":
                        return xn.InnerText;
                    default:
                        return "UnknownReadingType";
                }
            }
            catch
            {
                return null;
            }
        }


        /// <summary>
        /// 读取被指定的实节点的属性值的方法（重载一）
        /// </summary>
        /// <param name="path">被指定的实节点</param>
        /// <param name="attName">被读值的属性名</param>
        /// <returns>通常返回被读取属性的值，报错则返回null</returns>
        public string readAttribute(string path, string attName)
        {
            try
            {
                XmlNode xn = xDoc.SelectSingleNode(path);
                return xn.Attributes[attName].Value;
            }
            catch
            {
                return null;//方法中发生致命性错误，可能是由无法查找到节点属性导致
            }
        }
        /// <summary>
        /// 读取被指定的实节点的属性值的方法（重载二）
        /// </summary>
        /// <param name="XmlSign">Xml文档信息通用结构体</param>
        /// <returns>通常返回被读取属性的值，报错则返回null</returns>
        public string readAttribute(XmlSign XmlSign)
        {
            try
            {
                XmlNode xn = xDoc.SelectSingleNode(XmlSign.path);
                return xn.Attributes[XmlSign.attName].Value;
            }
            catch
            {
                return null;//方法中发生致命性错误，可能是由无法查找到节点属性导致
            }
        }

    }

    /// <summary>
    /// MySql数据库管理器
    /// </summary>
    public class MySqlConnH
    {
        /* 
         * 内置查询方法不会关闭(销毁)任何一个数据库连接
         * 若存在安全性需要，HCommand会被设置为null，但不会关闭(销毁)
         * 只有调用相关方法时才会执行该方面的操作
         */

        private MySqlConnection HConnection;
        private MySqlCommand HCommand;

        /// <summary>
        /// close主连接
        /// </summary>
        /// <returns>成功返回ture，反之或报错返回false</returns>
        public bool closeHConnection()
        {
            try
            {
                switch (HConnection.State)
                {
                    case ConnectionState.Open:
                        HConnection.Close();
                        if (HConnection.State == ConnectionState.Closed)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }

                    case ConnectionState.Closed:
                        return true;

                    default:
                        return false;
                }
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// dispose主连接
        /// </summary>
        /// <returns>成功返回ture，反之或报错返回false</returns>
        public bool disposeHConnection()
        {
            try
            {
                switch (HConnection.State)
                {
                    case ConnectionState.Open:
                        HConnection.Dispose();
                        if (HConnection.State == ConnectionState.Closed)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }

                    case ConnectionState.Closed:
                        return true;

                    default:
                        return false;
                }
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 将主连接设置为null值
        /// </summary>
        /// <returns>成功返回ture，反之或报错返回false</returns>
        public bool nullHConnection()
        {
            try
            {
                HConnection = null;
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 重启主连接（须以主连接定义完成为前提）
        /// </summary>
        /// <returns>成功返回ture，反之或报错返回false</returns>
        public bool restartHConnection()
        {
            try
            {
                switch (HConnection.State)
                {
                    case ConnectionState.Closed:
                        HConnection.Open();
                        if (HConnection.State == ConnectionState.Open)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }

                    case ConnectionState.Open:
                        return true;//注意，在连接打开时调用该方法再次打开也会返回true，这可能会带来安全性问题

                    default:
                        return false;
                }
            }
            catch
            {
                return false;
            }
        }


        /// <summary>
        /// dispose主命令行
        /// </summary>
        /// <returns>成功返回ture，反之或报错返回false</returns>
        public bool disposeHCommand()
        {
            try
            {
                HCommand.Dispose();
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 将主命令行设置为null值
        /// </summary>
        /// <returns>成功返回ture，反之或报错返回false</returns>
        public bool nullHCommand()
        {
            try
            {
                HCommand = null;
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 设置主命令行的sql语句（重载一）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
        /// </summary>
        /// <param name="MySqlConnection">要求主命令行执行的MySqlConnection连接实例</param>
        /// <param name="sql">被设置的sql语句</param>
        /// <returns>成功返回ture，反之或报错返回false</returns>
        public bool setHCommand(MySqlConnection MySqlConnection, string sql)
        {
            try
            {
                HCommand = new MySqlCommand(sql, MySqlConnection);
                return true;
            }
            catch
            {
                return false;
            }
        }
        /// <summary>
        /// 设置主命令行的sql语句（重载二：HConnection介入）（注意：此方法可能会引起未知的ACID问题，建议仅供调试使用）
        /// </summary>
        /// <param name="sql">被设置的sql语句</param>
        /// <returns>成功返回ture，反之或报错返回false</returns>
        public bool setHCommand(string sql)
        {
            try
            {
                HCommand = new MySqlCommand(sql, HConnection);
                return true;
            }
            catch
            {
                return false;
            }
        }



        /// <summary>
        /// 启动连接（重载一：HConnection介入）
        /// </summary>
        /// <param name="dataSource">数据源</param>
        /// <param name="port">端口</param>
        /// <param name="userName">用户名</param>
        /// <param name="password">密码</param>
        /// <returns>返回true，错误则返回null</returns>
        public bool start(string dataSource, string port, string userName, string password)
        {
            //组建连接信息并创建连接
            HConnection = new MySqlConnection
                (
                "Data source=" + dataSource + ";port="
                + port + ";User Id=" + userName + ";password=" + password + ";"
                );
            return start(HConnection);
        }
        /// <summary>
        /// 启动连接（重载二：HConnection介入）
        /// </summary>
        /// <param name="mysqlConn">连接签名</param>
        /// <returns>返回true，错误则返回false</returns>
        public bool start(mysqlConn mysqlConn)
        {
            //组建连接信息并创建连接
            HConnection = new MySqlConnection
                (
                "Data source=" + mysqlConn.dataSource + ";port=" +
                mysqlConn.port + ";User Id=" + mysqlConn.user + ";password=" + mysqlConn.password + ";"
                );
            return start(HConnection);
        }
        /// <summary>
        /// 启动连接（重载三）
        /// </summary>
        /// <param name="MySqlConnection">MySqlConnection连接实例</param>
        /// <returns>返回true，错误则返回false</returns>
        public bool start(MySqlConnection MySqlConnection)
        {
            switch (MySqlConnection.State)
            {
                case ConnectionState.Closed:
                    MySqlConnection.Open();
                    if (MySqlConnection.State == ConnectionState.Open)
                    {
                        return true;
                    }
                    else
                    {
                        return false;
                    }

                case ConnectionState.Open:
                    return true;//注意，在连接打开时调用该方法再次打开也会返回true，这可能会带来安全性问题

                default:
                    return false;
            }
        }



        /// <summary>
        /// 获得数据行（重载一）
        /// </summary>
        /// <param name="MySqlConnection">MySqlConnection连接实例</param>
        /// <param name="sql">SQL语句</param>
        /// <returns>返回查询结果</returns>
        public DataRow getRow(MySqlConnection MySqlConnection, string sql)
        {
            try
            {
                if (MySqlConnection.State == ConnectionState.Closed)//判断连接是否被关闭
                {
                    MySqlConnection.Open();//连接关闭则打开
                }
                using (MySqlDataAdapter myDA = new MySqlDataAdapter(sql, MySqlConnection))
                {
                    DataTable DataTable = new DataTable();
                    myDA.Fill(DataTable);

                    return DataTable.Rows[0];
                }
            }
            finally//释放资源
            {
                HCommand = null;
            }
        }
        /// <summary>
        /// 获得数据行（重载二）（适用于参数化查询）
        /// </summary>
        /// <param name="MySqlConnection">MySqlConnection连接实例</param>
        /// <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
        /// <returns>返回查询结果</returns>
        public DataRow getRow(MySqlConnection MySqlConnection, MySqlCommand MySqlCommand)
        {
            try
            {
                if (MySqlConnection.State == ConnectionState.Closed)//判断连接是否被关闭
                {
                    MySqlConnection.Open();//连接关闭则打开
                }
                //将外来cmd设置为基于MySqlConnection执行
                MySqlCommand.Connection = MySqlConnection;
                using (MySqlDataAdapter myDA = new MySqlDataAdapter(MySqlCommand))
                {
                    DataTable DataTable = new DataTable();
                    myDA.Fill(DataTable);

                    return DataTable.Rows[0];
                }
            }
            finally//释放资源
            {
                HCommand = null;
            }
        }
        /// <summary>
        /// 获得数据行（重载三：HConnection介入）
        /// </summary>
        /// <param name="sql">SQL语句</param>
        /// <returns>返回查询结果</returns>
        public DataRow getRow(string sql)
        {
            try
            {
                if (HConnection.State == ConnectionState.Closed)//判断连接是否被关闭
                {
                    HConnection.Open();//连接关闭则打开
                }
                using (MySqlDataAdapter myDA = new MySqlDataAdapter(sql, HConnection))
                {
                    DataTable DataTable = new DataTable();
                    myDA.Fill(DataTable);

                    return DataTable.Rows[0];
                }
            }
            finally//释放资源
            {
                HCommand = null;
            }
        }
        /// <summary>
        /// 获得数据行（重载四：HConnection介入）（适用于参数化查询）
        /// </summary>
        /// <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
        /// <returns>返回查询结果</returns>
        /// 
        public DataRow getRow(MySqlCommand MySqlCommand)
        {
            try
            {
                if (HConnection.State == ConnectionState.Closed)//判断连接是否被关闭
                {
                    HConnection.Open();//连接关闭则打开
                }
                //将外来cmd设置为基于HConnection执行
                MySqlCommand.Connection = HConnection;
                using (MySqlDataAdapter myDA = new MySqlDataAdapter(MySqlCommand))
                {
                    DataTable DataTable = new DataTable();
                    myDA.Fill(DataTable);

                    return DataTable.Rows[0];
                }
            }
            finally//释放资源
            {
                HCommand = null;
            }
        }
        /// <summary>
        /// 获得数据行（重载五：通过键值匹配，从数据表中获取数据行）
        /// </summary>
        /// <param name="DataTable">数据表实例</param>
        /// <param name="keyName">键名</param>
        /// <param name="keyValue">键值</param>
        /// <returns>返回获得的DataRow数据行实例，未检索到返回null</returns>
        public DataRow getRow(DataTable DataTable, string keyName, object keyValue)
        {
            foreach (DataRow DataRow in DataTable.Rows)
            {
                if (//全部转为string来判断是否相等，因为object箱结构不一样
                    DataRow[keyName].ToString() == keyValue.ToString()
                    )
                {
                    return DataRow;//返回符合被检索主键的行
                }
            }
            return null;//没找到返回bull
        }

        /// <summary>
        /// 抛出一个MySql连接（重载一）
        /// </summary>
        /// <param name="dataSource">数据源</param>
        /// <param name="port">端口</param>
        /// <param name="userName">用户名</param>
        /// <param name="password">密码</param>
        /// <returns>返回一个MySqlConnection对象，错误则返回null</returns>
        public MySqlConnection getConnection(string dataSource, string port, string userName, string password)
        {
            try
            {
                //返回创建的连接
                return new MySqlConnection
                    (//组建连接信息
                    "Data source=" + dataSource + ";port="
                    + port + ";User Id=" + userName + ";password=" + password + ";"
                    );
            }
            catch
            {
                return null;
            }
        }
        /// <summary>
        /// 抛出一个MySql连接（重载二）
        /// </summary>
        /// <param name="mysqlConn">连接签名</param>
        /// <returns>返回一个MySqlConnection对象，错误则返回null</returns>
        public MySqlConnection getConnection(mysqlConn mysqlConn)
        {
            try
            {
                //返回创建的连接
                return new MySqlConnection
                    (//组建连接信息
                    "Data source=" + mysqlConn.dataSource + ";port=" +
                    mysqlConn.port + ";User Id=" + mysqlConn.user + ";password=" + mysqlConn.password + ";"
                    );
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// 获取一张数据表（重载一）
        /// </summary>
        /// <param name="MySqlConnection">MySqlConnection连接实例</param>
        /// <param name="sql">用于查询数据表的SQL语句</param>
        /// <returns>返回一个DataTable对象，错误则返回null</returns>
        public DataTable getTable(MySqlConnection MySqlConnection, string sql)
        {
            //新建数据适配器
            MySqlDataAdapter myDA = new MySqlDataAdapter(sql, MySqlConnection);
            if (MySqlConnection.State == ConnectionState.Closed)//检测是否开启
            {
                MySqlConnection.Open();
            }

            //新建数据表
            DataTable table = new DataTable();
            myDA.Fill(table);//填充数据到table

            return table;
        }
        /// <summary>
        /// 获取一张数据表（重载二）（适用于参数化查询）
        /// </summary>
        /// <param name="MySqlConnection">MySqlConnection连接实例</param>
        /// <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
        /// <returns>返回一个DataTable对象，错误则返回null</returns>
        public DataTable getTable(MySqlConnection MySqlConnection, MySqlCommand MySqlCommand)
        {
            //将外来cmd设置为基于MySqlConnection执行
            MySqlCommand.Connection = MySqlConnection;
            //新建数据适配器，以外来cmd初始化
            MySqlDataAdapter myDA = new MySqlDataAdapter(MySqlCommand);
            if (MySqlConnection.State == ConnectionState.Closed)//检测是否开启
            {
                MySqlConnection.Open();
            }

            //新建数据表
            DataTable table = new DataTable();
            myDA.Fill(table);//填充数据到table

            return table;
        }
        /// <summary>
        /// 获取一张数据表（重载三：HConnection介入）
        /// </summary>
        /// <param name="sql">SQL语句，用于查询数据表</param>
        /// <returns>返回一个DataTable对象，错误则返回null</returns>
        public DataTable getTable(string sql)
        {
            //新建数据适配器
            MySqlDataAdapter myDA = new MySqlDataAdapter(sql, HConnection);
            if (HConnection.State == ConnectionState.Closed)
            {
                HConnection.Open();
            }

            //新建数据表
            DataTable table = new DataTable();
            myDA.Fill(table);//填充数据到DataTable

            return table;
        }
        /// <summary>
        /// 获取一张数据表（重载四：HConnection介入）（适用于参数化查询）
        /// </summary>
        /// <param name="MySqlCommand">MySqlCommand对象，用于进行查询</param>
        /// <returns>返回一个DataTable对象，错误则返回null</returns>
        public DataTable getTable(MySqlCommand MySqlCommand)
        {
            //将外来cmd设置为基于HConnection执行
            MySqlCommand.Connection = HConnection;
            //新建数据适配器，以外来cmd初始化
            MySqlDataAdapter myDA = new MySqlDataAdapter(MySqlCommand);
            if (HConnection.State == ConnectionState.Closed)
            {
                HConnection.Open();
            }

            //新建数据表
            DataTable table = new DataTable();
            myDA.Fill(table);//填充数据到DataTable

            return table;
        }

        /// <summary>
        /// 从数据表中提取取数据列
        /// </summary>
        /// <param name="DataTable">数据表实例</param>
        /// <param name="columnName">列名</param>
        /// <returns>返回非泛型List{object}实例，错误则返回null</returns>
        public List<object> getColumn(DataTable DataTable, string columnName)
        {
            try
            {
                List<object> list = new List<object>();
                foreach (DataRow DataRow in DataTable.Rows)
                {
                    list.Add(DataRow[columnName]);//将数据表中columnName列的所有行数据依次添加到list中
                }
                return list;//返回列
            }
            catch
            {
                return null;
            }
        }



        /// <summary>
        /// 设置(替换)一个键值（键匹配查询）
        /// </summary>
        /// <param name="MySqlConnection">数据库连接实例，用于承担该操作</param>
        /// <param name="mysqlKey">定位键</param>
        /// <param name="keyName">操作于键名</param>
        /// <param name="keyValue">更改为该键值</param>
        /// <returns>操作成功返回true</returns>
        public bool setColumnValue(MySqlConnection MySqlConnection, mysqlKey mysqlKey, string keyName, string keyValue)
        {
            #region SQL字符串处理
            string sql = "UPDATE " +
                         mysqlKey.dataBase + "." + mysqlKey.table +
                         " SET " +
                         keyName + "='" + keyValue +
                         "' WHERE " +
                         mysqlKey.primaryKeyName + "='" + mysqlKey.primaryKeyValue +
                         "';";
            #endregion
            HCommand = new MySqlCommand(sql, MySqlConnection);
            try
            {
                if (HCommand.Connection.State == ConnectionState.Closed)//查询连接状况
                {
                    HCommand.Connection.Open();//若连接被关闭则打开连接
                }

                if (HCommand.ExecuteNonQuery() > 0)
                { return true; }//查询成功返回true
                else
                { return false; }//查询失败返回false
            }
            finally//释放内存
            {
                HCommand = null;
            }
        }
        /// <summary>
        /// 设置(替换)一个键值（键匹配查询）
        /// （重载二：HConnection介入）
        /// </summary>
        /// <param name="mysqlKey">定位键</param>
        /// <param name="keyName">操作于键名</param>
        /// <param name="keyValue">更改为该键值</param>
        /// <returns>操作成功返回true</returns>
        public bool setColumnValue(mysqlKey mysqlKey, string keyName, string keyValue)
        {
            #region SQL字符串处理
            string sql = "UPDATE " +
                         mysqlKey.dataBase + "." + mysqlKey.table +
                         " SET " +
                         keyName + "='" + keyValue +
                         "' WHERE " +
                         mysqlKey.primaryKeyName + "='" + mysqlKey.primaryKeyValue +
                         "';";
            #endregion
            HCommand = new MySqlCommand(sql, HConnection);
            try
            {
                if (HCommand.Connection.State == ConnectionState.Closed)//查询连接状况
                {
                    HCommand.Connection.Open();//若连接被关闭则打开连接
                }

                if (HCommand.ExecuteNonQuery() > 0)
                { return true; }//查询成功返回true
                else
                { return false; }//查询失败返回false
            }
            finally//释放内存
            {
                HCommand = null;
            }
        }

        /// <summary>
        /// 获得一个键值（键匹配查询）
        ///（重载一）
        /// 如果查询到多个行，则只返回第一行的数据
        /// </summary>
        /// <param name="MySqlConnection">数据库连接实例，用于承担该操作</param>
        /// <param name="mysqlKey">定位键</param>
        /// <param name="keyName">键名</param>
        /// <returns>操作成功返回true</returns>
        public object getColumnValue(MySqlConnection MySqlConnection, mysqlKey mysqlKey, string keyName)
        {
            #region SQL字符串处理
            string sql = "SELECT " +
                         keyName +
                         " FROM " +
                         mysqlKey.dataBase + "." + mysqlKey.table +
                         " WHERE " +
                         mysqlKey.primaryKeyName + "='" + mysqlKey.primaryKeyValue +
                         "';";
            #endregion
            HCommand = new MySqlCommand(sql, MySqlConnection);
            try
            {
                if (HCommand.Connection.State == ConnectionState.Closed)//查询连接状况
                {
                    HCommand.Connection.Open();//若连接被关闭则打开连接
                }
                return HCommand.ExecuteScalar();
            }
            finally//释放内存
            {
                HCommand = null;
            }
        }
        /// <summary>
        /// 获得一个键值（键匹配查询）
        /// （重载二：HConnection介入）
        /// 如果查询到多个行，则只返回第一行的数据
        /// </summary>
        /// <param name="mysqlKey">定位键</param>
        /// <param name="keyName">键名</param>
        /// <returns>操作成功返回true</returns>
        public object getColumnValue(mysqlKey mysqlKey, string keyName)
        {
            #region SQL字符串处理
            string sql = "SELECT " +
                         keyName +
                         " FROM " +
                         mysqlKey.dataBase + "." + mysqlKey.table +
                         " WHERE " +
                         mysqlKey.primaryKeyName + "='" + mysqlKey.primaryKeyValue +
                         "';";
            #endregion
            HCommand = new MySqlCommand(sql, HConnection);
            try
            {
                if (HCommand.Connection.State == ConnectionState.Closed)//查询连接状况
                {
                    HCommand.Connection.Open();//若连接被关闭则打开连接
                }
                return HCommand.ExecuteScalar();
            }
            finally//释放内存
            {
                HCommand = null;
            }
        }

        /// <summary>
        /// 建立参数化查询cmd对象
        /// </summary>
        /// <param name="sql">携带查询参数的SQL语句</param>
        /// <param name="parmList">查询参数列表</param>
        /// <returns>返回建立的参数化查询cmd对象</returns>
        public MySqlCommand parmQueryCmd(string sql, List<mysqlParm> parmList)
        {
            //建立cmd对象，用于执行参数化查询
            using (MySqlCommand MySqlCommand = new MySqlCommand(sql))
            {
                foreach (mysqlParm Parm in parmList)
                {
                    MySqlCommand.Parameters.AddWithValue(Parm.parmName, Parm.parmValue);//添加参数
                }
                return MySqlCommand;
            }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.IO;
using System.Web;
using System.Web.UI;
using System.Security.Cryptography;

namespace basicUnit
{
    /// <summary>
    /// 该类包含编程常用的基本方法
    /// </summary>
    public class BasicMethod
    {
        /// <summary>
        /// 交换值的方法，引用类型
        /// </summary>
        /// <param name="i"></param>
        /// <param name="j"></param>
        public static void exch(ref int i, ref int j)
        {
            int temp = i;
            i = j;
            j = temp;
        }
        /// <summary>
        /// 比较大小的方法
        /// </summary>
        /// <param name="i"></param>
        /// <param name="j"></param>
        /// <returns></returns>
        public static bool less(int i, int j)
        {
            return i.CompareTo(j) < 0;
        }

        /// <summary>
        /// 冒泡排序
        /// </summary>
        /// <param name="array">被排序的数组</param>
        /// <returns>通常返回有序数组(由小到大)，报错则返回null</returns>
        public static T[] easySort<T>(T[] array) where T : IComparable
        {
            try
            {
                for (int path = 0; path < array.Length; path++)//正被有序的起始位
                {
                    for (int i = 0; i < array.Length; i++)//临近元素排序
                    {
                        if (i + 1 < array.Length)//元素交换
                        {
                            T tmp; ;
                            if (array[i].CompareTo(array[i + 1]) > 0)
                            {
                                tmp = array[i];
                                array[i] = array[i + 1];
                                array[i + 1] = tmp;
                            }
                        }

                    }
                }
                return array;
            }
            catch
            {
                return null;
            }
        }
        /// <summary>
        /// 希尔排序
        /// </summary>
        /// <param name="array">待排序的整数组</param>
        /// <returns>返回排序完成的数组</returns>
        public static int[] shellSort(int[] array)
        {
            int N = array.Length;
            int h = 1;

            while (h < N / 3)
                h = 3 * h + 1;
            while (h >= 1)
            {
                for (int i = h; i < N; i++)
                {
                    for (int j = i; j >= h && less(array[j], array[j - h]); j -= h)
                        exch(ref array[j], ref array[j - h]);
                }
                h = h / 3;
            }

            return array;
        }

        /// <summary>
        /// 二分法检索(重载一),适用于整型检索
        /// </summary>
        /// <param name="value">被检索值</param>
        /// <param name="array">数组,顺序由小到大</param>
        /// <returns>若数组存在被检索值,则返回值在数组中的位置,若不存在则返回-1,报错则返回-2</returns>
        public static int binarySearch(int value, int[] array)
        {
            try//二分法主体
            {
                int low = 0;
                int high = array.Length - 1;
                while (low <= high)
                {
                    int mid = (low + high) / 2;

                    if (value == array[mid])
                    {
                        return mid;
                    }
                    if (value > array[mid])
                    {
                        low = mid + 1;
                    }
                    if (value < array[mid])
                    {
                        high = mid - 1;
                    }
                }
                return -1;
            }
            catch
            {
                return -2;
            }
        }
        /// <summary>
        /// 二分法检索(重载二),适用于双精度浮点检索
        /// </summary>
        /// <param name="value">被检索值</param>
        /// <param name="array">数组，顺序由小到大</param>
        /// <returns>若数组存在被检索值,则返回值在数组中的位置,若不存在则返回-1,报错则返回-2</returns>
        public static double binarySearch(double value, double[] array)
        {
            try//二分法主体
            {
                double low = 0;
                double high = array.Length - 1;
                while (low <= high)
                {
                    int mid = (int)(low + high) / 2;

                    if (value == array[mid])
                    {
                        return mid;
                    }
                    if (value > array[mid])
                    {
                        low = mid + 1;
                    }
                    if (value < array[mid])
                    {
                        high = mid - 1;
                    }
                }
                return -1;
            }
            catch
            {
                return -2;
            }
        }

        /// <summary>
        /// 以字符串形式输出文件（重载一）（UTF8编码模式）
        /// </summary>
        /// <param name="url">文件所在的本地网络路径</param>
        /// <returns>返回字符串</returns>
        public static string fileToString(string url)
        {
            //读取url文件到文件尾，然后返回
            return LibFrame.LibFrameInfo.getStreamReader(url).ReadToEnd();
        }
        /// <summary>
        /// 以字符串形式输出文件（重载二）
        /// </summary>
        /// <param name="url">文件所在的本地网络路径</param>
        /// /// <param name="encodingType">解析文件所用的编码模式</param>
        /// <returns>返回字符串</returns>
        public static string fileToString(string url, string encodingType)
        {
            //读取url文件到文件尾，然后返回
            return LibFrame.LibFrameInfo.getStreamReader(url, encodingType).ReadToEnd();
        }
        /// <summary>
        /// 以字符串形式输出文件（重载三）（UTF8编码模式）
        /// </summary>
        /// <param name="filePath">文件所在的本地物理路径</param>
        /// <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
        /// <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
        /// <returns>返回字符串</returns>
        public static string fileToString(string filePath, int bufferSize, bool useAsync)
        {

            using (
                StreamReader StreamReader = new StreamReader//流读取对象
                (new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Write, bufferSize, useAsync)//文件流对象
                , Encoding.GetEncoding("UTF8"))//指定编码模式
                    )
            {
                //以字符串形式输出文件
                return StreamReader.ReadToEnd().ToString();
            }
        }
        /// <summary>
        /// 以字符串形式输出文件（重载四）
        /// </summary>
        /// <param name="filePath">文件所在的本地物理路径</param>
        /// <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
        /// <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
        /// <param name="encodingType">解析文件所用的编码模式</param>
        /// <returns>返回字符串</returns>
        public static string fileToString(string filePath, int bufferSize, bool useAsync, string encodingType)
        {

            using (
                StreamReader StreamReader = new StreamReader//流读取对象
                (new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Write, bufferSize, useAsync)//文件流对象
                , Encoding.GetEncoding(encodingType))//指定编码模式
                    )
            {
                //以字符串形式输出文件
                return StreamReader.ReadToEnd().ToString();
            }

        }

        /// <summary>
        /// 对象输出到MD5
        /// </summary>
        /// <typeparam name="T">待转换对象对应的类型</typeparam>
        /// <param name="obj">待转换对象</param>
        /// <returns>返回处理后得到的字符串</returns>
        public static string toMD5<T>(T obj)
        {
            byte[] source = Encoding.Default.GetBytes(Convert.ToString(obj));/* 将对象转换成string后转换成字节数组 */
            byte[] data = MD5.Create().ComputeHash(source);/* 创建SHA1对象进行散列计算 */

            StringBuilder md5 = new StringBuilder();/* 创建一个新的Stringbuilder收集字节 */
            foreach (var temp in data)/* 遍历每个字节的散列数据 */
            {
                md5.Append(temp.ToString("X2"));/* 格式每一个十六进制字符串 */
            }

            return md5.ToString();
        }
        /// <summary>
        /// 对象输出到SHA1
        /// </summary>
        /// <typeparam name="T">待转换对象对应的类型</typeparam>
        /// <param name="obj">待转换对象</param>
        /// <returns>返回处理后得到的字符串</returns>
        public static string toSHA1<T>(T obj)
        {
            byte[] source = Encoding.Default.GetBytes(Convert.ToString(obj));
            byte[] data = SHA1.Create().ComputeHash(source);

            StringBuilder sha1 = new StringBuilder();
            foreach (var temp in data)
            {
                sha1.Append(temp.ToString("X2"));
            }

            return sha1.ToString();
        }
        /// <summary>
        /// 对象输出到SHA256
        /// </summary>
        /// <typeparam name="T">待转换对象对应的类型</typeparam>
        /// <param name="obj">待转换对象</param>
        /// <returns>返回处理后得到的字符串</returns>
        public static string toSHA256<T>(T obj)
        {
            byte[] source = Encoding.Default.GetBytes(Convert.ToString(obj));
            byte[] data = SHA1.Create().ComputeHash(source);

            StringBuilder sha256 = new StringBuilder();
            foreach (var temp in data)
            {
                sha256.Append(temp.ToString("X2"));
            }

            return sha256.ToString();
        }
    }

    /// <summary>
    /// 该类包含web编程常用的基本方法
    /// </summary>
    public class WebMethod : Page
    {
        /* cookie操作 */
        /// <summary>
        /// 判断Cookie对象是否存在
        /// </summary>
        /// <param name="CookieName">被判断Cookie对象的名称</param>
        /// <returns>存在返回true，反之false</returns>
        public bool isCookiesExist(string CookieName)
        {
            if (HttpContext.Current.Request.Cookies[CookieName] == null)//如果Cookie对象为null（不存在）
            {
                return false;
            }
            else
            {
                return true;
            }

        }
        /// <summary>
        /// 判断Cookie对象是否存在（重载二：判断索引是否存在）
        /// </summary>
        /// <param name="CookieName">被判断Cookie对象的名称</param>
        /// <param name="keyName">索引名，属于被判断的Cookie</param>
        /// <returns>存在返回true，反之false</returns>
        public bool isCookiesExist(string CookieName, string keyName)
        {
            if (isCookiesExist(CookieName) == true)//如果Cookie对象存在
            {
                if (HttpContext.Current.Request.Cookies[CookieName][keyName].ToString() != "")//如果Cookie中的keyName索引键值为空字符串
                {
                    return false;//不存在
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }

        }

        /// <summary>
        /// 读取Cookie对象到指定类型
        /// </summary>
        /// <typeparam name="T">指定泛型</typeparam>
        /// <param name="CookieName">被读取Cookie对象名</param>
        /// <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        public T cookie<T>(string CookieName)
        {
            if (isCookiesExist(CookieName) == true)//如果Cookie对象存在
            {
                if (HttpContext.Current.Request.Cookies[CookieName].Value == "")
                {
                    /* 如果Cookie对象值为空字符串（null），返回泛型默认值 */
                    /* 在当前版本C#(7.3)中，default(T)可以简化为default */
                    return default;
                }
                else
                {
                    if (HttpContext.Current.Request.Cookies[CookieName].Value == null)
                    {
                        return default;
                    }
                    else
                    {
                        //如果Cookie对象的索引值不为null，转换为泛型返回
                        return (T)Convert.ChangeType(HttpContext.Current.Request.Cookies[CookieName].Value, typeof(T));
                    }
                }
            }
            else
            {
                return default;
            }

        }
        /// <summary>
        /// 读取Cookie对象的指定索引值到指定类型
        /// </summary>
        /// <typeparam name="T">指定泛型</typeparam>
        /// <param name="CookieName">被读取Cookie对象名</param>
        /// <param name="keyName">索引名，属于当前Cookie对象</param>
        /// <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        public T cookie<T>(string CookieName, string keyName)
        {
            if (isCookiesExist(CookieName, keyName) == true)
            {
                //如果索引键值不为空字符串，转换为泛型返回
                return (T)Convert.ChangeType(HttpContext.Current.Request.Cookies[CookieName][keyName].ToString(), typeof(T));
            }
            else
            {
                return default;
            }

        }

        /// <summary>
        /// 设置Cookie值
        /// </summary>
        /// <param name="CookieName">Cookie名，承担该操作</param>
        /// <param name="value">设置值</param>
        /// <returns>设置成功返回true，反之false</returns>
        public bool setCookie(string CookieName, object value)
        {
            HttpContext.Current.Response.Cookies[CookieName].Value = value.ToString();
            return true;
        }
        /// <summary>
        /// 设置Cookie值（重载二：索引设置）
        /// </summary>
        /// <param name="CookieName">Cookie名，承担该操作</param>
        /// <param name="keyName">索引名，属于承担该操作的Cookie</param>
        /// <param name="value">设置值</param>
        /// <returns>设置成功返回true，反之false</returns>
        public bool setCookie(string CookieName, string keyName, object value)
        {
            HttpContext.Current.Response.Cookies[CookieName][keyName] = value.ToString();
            return true;
        }

        /* session操作 */
        /// <summary>
        /// 读取Session对象到指定类型
        /// </summary>
        /// <typeparam name="T">指定泛型</typeparam>
        /// <param name="varName">变量名，属于Session对象，承担该操作</param>
        /// <returns>返回泛型值，读取失败则返回泛型默认值</returns>
        public T session<T>(string varName)
        {
            //测试表明，Session对象始终存在，并且不为null，所以可以不加判断直接转换
            return (T)Convert.ChangeType(HttpContext.Current.Session[varName], typeof(T));//转换为自定义类型
        }
        /// <summary>
        /// 设置Session对象的变量值
        /// </summary>
        /// <param name="varName">变量名，属于Session对象，承担该操作</param>
        /// <param name="value">设置值</param>
        /// <returns>设置成功返回true，反之false</returns>
        public bool setSession(string varName, object value)
        {
            HttpContext.Current.Session[varName] = value;
            return true;
        }
    }
}
namespace WaterLibrary
{
    namespace libFrame { }

    namespace libStruct { }

    namespace WaterLibrary.libUnit
    {
        namespace basicUnit { }

        namespace businessUnit { }

        namespace dataUnit { }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using LibFrame;
using LibStruct.Interface;
using dataUnit;
using businessUnit.pilipala;

namespace LibStruct
{
    namespace Interface
    {
        /// <summary>
        /// 索引表数据接口
        /// </summary>
        public interface IPaTextIndex
        {
            /// <summary>
            /// 文本索引
            /// </summary>
            int text_id { get; set; }
            /// <summary>
            /// 文本模式
            /// </summary>
            string text_mode { get; set; }
            /// <summary>
            /// 文本类型
            /// </summary>
            string text_type { get; set; }
        }
        /// <summary>
        /// 主表数据接口
        /// </summary>
        public interface IPaTextMain
        {
            /// <summary>
            /// 文本标题
            /// </summary>
            string text_title { get; set; }
            /// <summary>
            /// 文本概要
            /// </summary>
            string text_summary { get; set; }
            /// <summary>
            /// 文本正文
            /// </summary>
            string text_content { get; set; }
        }
        /// <summary>
        /// 副表数据接口
        /// </summary>
        public interface IPaTextSub
        {
            /// <summary>
            /// 文本归档
            /// </summary>
            string text_archiv { get; set; }
            /// <summary>
            /// 文本作者
            /// </summary>
            string text_editor { get; set; }
            /// <summary>
            /// 创建日期
            /// </summary>
            DateTime date_created { get; set; }
            /// <summary>
            /// 变更日期
            /// </summary>
            DateTime date_changed { get; set; }
            /// <summary>
            /// 浏览计数
            /// </summary>
            int count_pv { get; set; }
            /// <summary>
            /// 评论计数
            /// </summary>
            int count_comment { get; set; }
            /// <summary>
            /// 星星计数
            /// </summary>
            int count_star { get; set; }
            /// <summary>
            /// 标签集合
            /// </summary>
            string tags { get; set; }
            /// <summary>
            /// 封面链接
            /// </summary>
            string cover_url { get; set; }
        }

        /// <summary>
        /// 用户数据接口
        /// </summary>
        public interface IPaUser
        {
            /// <summary>
            /// 权限ID
            /// </summary>
            int root_id { get; set; }
            /// <summary>
            /// 权限定义者
            /// </summary>
            string root_definer { get; set; }
            /// <summary>
            /// 站点开发者模式状态
            /// </summary>
            bool site_debug { get; set; }
            /// <summary>
            /// 站点可用（该值用于关闭站点）
            /// </summary>
            bool site_access { get; set; }
            /// <summary>
            /// 站点URL
            /// </summary>
            string site_url { get; set; }
            /// <summary>
            /// 站点标题
            /// </summary>
            string site_title { get; set; }
            /// <summary>
            /// 站点概要
            /// </summary>
            string site_summary { get; set; }
        }

        /// <summary>
        /// 文本基本数据接口
        /// </summary>
        public interface ITextBasic
        {
            /// <summary>
            /// 文本序列号
            /// </summary>
            int text_id { get; set; }
            /// <summary>
            /// 文本
            /// </summary>
            string innerText { get; set; }
        }
    }

    /// <summary>
    /// Json本库信息
    /// </summary>
    public class JlinfObject : ILibFrameInfo
    {
        //主要信息
        /// <summary>
        /// 版本号
        /// </summary>
        public int projectVer
        {
            get; set;
        }
        /// <summary>
        /// 版本名字对象
        /// </summary>
        public string projectMoniker
        {
            get; set;
        }
        /// <summary>
        /// 版本类型
        /// </summary>
        public string editionType
        {
            get; set;
        }
        /// <summary>
        /// 步进
        /// </summary>
        public string stepping
        {
            get; set;
        }
        /// <summary>
        /// 类库的目标框架
        /// </summary>
        public string targetFramework
        {
            get; set;
        }
        /// <summary>
        /// 类库的目标框架名字对象
        /// </summary>
        public string targetFrameworkMoniker
        {
            get; set;
        }
        /// <summary>
        /// 针对最近一次发行版的全局兼容性
        /// </summary>
        public bool compat
        {
            get; set;
        }
        /// <summary>
        /// 适用平台
        /// </summary>
        public string platform
        {
            get; set;
        }

        //次要信息
        /// <summary>
        /// 架构名
        /// </summary>
        public string architecture
        {
            get; set;
        }
        /// <summary>
        /// 开发代号
        /// </summary>
        public string developmentCode
        {
            get; set;
        }
        /// <summary>
        /// 版本概要
        /// </summary>
        public string summary
        {
            get; set;
        }
        /// <summary>
        /// 是否为最新pub版本
        /// </summary>
        public bool isNewVer
        {
            get; set;
        }
        /// <summary>
        /// 最新pub版本下载URL
        /// </summary>
        public string newVerURL
        {
            get; set;
        }
    }

    /// <summary>
    /// XML描述结构
    /// </summary>
    public struct XmlSign
    {
        /// <summary>
        /// 节点地址，如父节点、实节点、子节点的地址，用于XmlCreater类中除reStream、CreateXml方法外的所有方法
        /// </summary>
        public string path { get; set; }
        /// <summary>
        /// 被创建的Xml文档的文件地址，用于XmlCreater类的CreateXml方法
        /// </summary>
        public string fileName { get; set; }
        /// <summary>
        /// 被创建的Xml文档的文件名，用于XmlCreater类的CreateXml方法
        /// </summary>
        public string xmlName { get; set; }
        /// <summary>
        /// 被创建的Xml文档的根元素名，用于XmlCreater类的CreateXml方法
        /// </summary>
        public string rootName { get; set; }
        /// <summary>
        /// 节点名，可表示子节点、父节点、新建空\实节点名，用于XmlCreater类的AddRealNode、AddEmptyNode、RemoveNode方法
        /// </summary>
        public string nodeName { get; set; }
        /// <summary>
        /// 节点的属性名，用于XmlCreater类的AddRealNode、ReadAtt方法
        /// </summary>
        public string attName { get; set; }
        /// <summary>
        /// 节点的属性值，用于XmlCreater类的AddRealNode方法
        /// </summary>
        public string attValue { get; set; }
        /// <summary>
        /// 节点的子文本，用于XmlCreater类的AddRealNode方法
        /// </summary>
        public string innerText { get; set; }
        /// <summary>
        /// 读取类型，可选值有"_name"、"_value"，用于XmlCreater类的ReadNode方法
        /// </summary>
        public string type { get; set; }
    }

    namespace MySql
    {
        /// <summary>
        /// 键（用于键匹配查询）
        /// </summary>
        public struct mysqlKey
        {
            /// <summary>
            /// 数据库名
            /// </summary>
            public string dataBase { get; set; }
            /// <summary>
            /// 表名
            /// </summary>
            public string table { get; set; }

            /// <summary>
            /// 主键名
            /// </summary>
            public string primaryKeyName { get; set; }
            /// <summary>
            /// 主键值
            /// </summary>
            public string primaryKeyValue { get; set; }
        }
        /// <summary>
        /// 连接信息
        /// </summary>
        public struct mysqlConn
        {
            /// <summary>
            /// 数据源
            /// </summary>
            public string dataSource { get; set; }
            /// <summary>
            /// 端口
            /// </summary>
            public string port { get; set; }
            /// <summary>
            /// 用户名
            /// </summary>
            public string user { get; set; }
            /// <summary>
            /// 用户名对应的密码
            /// </summary>
            public string password { get; set; }
        }
        /// <summary>
        /// 参数（用于参数化查询添加参数）
        /// </summary>
        public struct mysqlParm
        {
            /// <summary>
            /// 参数名
            /// </summary>
            public string parmName { get; set; }
            /// <summary>
            /// 参数值
            /// </summary>
            public object parmValue { get; set; }
        }
    }

    namespace pilipala
    {
        /// <summary>
        /// 啪啦文本数据
        /// </summary>
        public struct PaText : IPaTextIndex, IPaTextMain, IPaTextSub
        {
            /* 索引表数据 */
            /// <summary>
            /// 
            /// </summary>
            public int text_id { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string text_mode { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string text_type { get; set; }

            /* 主表数据 */
            /// <summary>
            /// 
            /// </summary>
            public string text_title { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string text_summary { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string text_content { get; set; }

            /* 副表数据 */
            /// <summary>
            /// 
            /// </summary>
            public string text_archiv { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string text_editor { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public DateTime date_created { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public DateTime date_changed { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public int count_pv { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public int count_comment { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public int count_star { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string tags { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string cover_url { get; set; }
        }
        /// <summary>
        /// 用户数据
        /// </summary>
        public struct PaUser : IPaUser
        {
            /// <summary>
            /// 
            /// </summary>
            public int root_id { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string root_definer { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public bool site_debug { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public bool site_access { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string site_url { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string site_title { get; set; }
            /// <summary>
            /// 
            /// </summary>
            public string site_summary { get; set; }
        }
        /// <summary>
        /// 啪啦数据库信息
        /// </summary>
        public struct PaDB : IPaRoot
        {
            /// <summary>
            /// Pala数据表所在数据库
            /// </summary>
            public string dataBase { get; set; }
            /// <summary>
            /// 文本表
            /// </summary>
            public PaRoot.Tables Tables { get; set; }
            /// <summary>
            /// 文本视图
            /// </summary>
            public PaRoot.Views Views { get; set; }
            /// <summary>
            /// 数据库管理器实例
            /// </summary>
            public MySqlConnH MySqlConnH { get; set; }
        }

        /// <summary>
        /// 分立文章标题
        /// </summary>
        public struct TextTitle : ITextBasic
        {
            /// <summary>
            /// 文本序列号
            /// </summary>
            public int text_id { get; set; }
            /// <summary>
            /// 文本
            /// </summary>
            public string innerText { get; set; }
        }
        /// <summary>
        /// 分立文章概要
        /// </summary>
        public struct TextSummary : ITextBasic
        {
            /// <summary>
            /// 文本序列号
            /// </summary>
            public int text_id { get; set; }
            /// <summary>
            /// 文本
            /// </summary>
            public string innerText { get; set; }
        }
        /// <summary>
        /// 分立文章内容
        /// </summary>
        public struct TextContent : ITextBasic
        {
            /// <summary>
            /// 文本序列号
            /// </summary>
            public int text_id { get; set; }
            /// <summary>
            /// 文本
            /// </summary>
            public string innerText { get; set; }
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.IO;
using System.Net;
using System.Web.Script.Serialization;

using LibStruct;

namespace LibFrame
{
    /// <summary>
    /// 版本控制限定
    /// </summary>
    public interface ILibFrameInfo
    {
        /// <summary>
        /// 版本
        /// </summary>
        int projectVer
        {
            get;
        }
        /// <summary>
        /// 版本名字对象
        /// </summary>
        string projectMoniker
        {
            get;
        }
        /// <summary>
        /// 版本类型
        /// </summary>
        string editionType
        {
            get;
        }
        /// <summary>
        /// 步进
        /// </summary>
        string stepping
        {
            get;
        }
        /// <summary>
        /// 目标框架
        /// </summary>
        string targetFramework
        {
            get;
        }
        /// <summary>
        /// 目标框架名字对象
        /// </summary>
        string targetFrameworkMoniker
        {
            get;
        }
        /// <summary>
        /// 对最近一次pub版本的全局兼容性
        /// </summary>
        bool compat
        {
            get;
        }
        /// <summary>
        /// 适用平台
        /// </summary>
        string platform
        {
            get;
        }
    }

    /// <summary>
    /// 用于获取类库框架信息的类
    /// </summary>
    public sealed class LibFrameInfo : ILibFrameInfo
    {
        #region

        private static string SubHlinfURL;/* 子URL，HlinfURL失效时用于替补 */

        /// <summary>
        /// 版本
        /// </summary>
        public int projectVer { get; } = 113;
        /// <summary>
        /// 版本名字对象
        /// </summary>
        public string projectMoniker { get; } = "st114";
        /// <summary>
        /// 版本类型
        /// </summary>
        public string editionType { get; } = "public";
        /// <summary>
        /// 步进
        /// </summary>
        public string stepping { get; } = "a0";
        /// <summary>
        /// 类库的目标框架
        /// </summary>
        public string targetFramework { get; } = ".NET Framework";
        /// <summary>
        /// 类库的目标框架名字对象
        /// </summary>
        public string targetFrameworkMoniker { get; } = "net452";
        /// <summary>
        /// 类库的目标C#版本
        /// </summary>
        public string targetCSharpLang { get; } = "7.2";
        /// <summary>
        /// 针对最近一次发行版的全局兼容性
        /// </summary>
        public bool compat { get; } = false;
        /// <summary>
        /// 适用平台
        /// </summary>
        public string platform { get; } = "x86";
        /// <summary>
        /// 是否为最新pub版本
        /// </summary>
        public string isNewVer { get; }
        /// <summary>
        /// 最新pub版本下载URL
        /// </summary>
        public string newVerDownloadURL { get; }
        /// <summary>
        /// 当前版本下载URL
        /// </summary>
        public string thisVerDownloadURL { get; }
        /// <summary>
        /// 内置于当前版本的Hlinf信息获取URL
        /// </summary>
        public string HlinfURL { get; } = "https://thaumy.github.io/StdLib1x/xplore/st114_Hlinf.html";

        #endregion

        /// <summary>
        /// 初始化LibInformation
        /// </summary>
        /// <param name="spareInfUrl">必须的值：用于内置联网信息获取Url失效时进行替补的Url</param>
        public LibFrameInfo(string spareInfUrl)
        {
            /* 这里可写为LibFrameInfo.SubHlinfURL = spareInfUrl; */
            /* 由于此模块功能长期搁置，故注释出源代码，避免出现原始设计该代码时避免的错误发生后增加调试成本 */
            SubHlinfURL = spareInfUrl;

            isNewVer = pvtGetHtmlLibInformation()[0];//得到是否为最新pub版本
            newVerDownloadURL = pvtGetHtmlLibInformation()[1];//得到最新版本下载URL

            thisVerDownloadURL = pvtGetHtmlLibInformation()[2];//得到当前版本下载URL
        }

        /// <summary>
        /// 被重写的WebClient
        /// </summary>
        public class OWebClient : WebClient
        {
            /// <summary>
            /// WebRequest请求访问的超时时间
            /// </summary>
            public int timeOut { get; set; }

            /// <summary>
            /// 得到WebRwquest请求实例并附加超时时间的方法
            /// </summary>
            /// <param name="uri">统一资源标识符对象</param>
            /// <returns>返回WebRequests实例(注意！该部分代码尚不安全，因为它没有建立报错处理机制)</returns>
            protected override WebRequest GetWebRequest(Uri uri)
            {
                WebRequest request = base.GetWebRequest(uri);
                request.Timeout = timeOut;//设置超时时间

                return request;
            }
        }

        /// <summary>
        /// 获取url指定的OWebClient所赋值的StreamReader对象（重载一）（UTF8编码模式）
        /// </summary>
        /// <param name="url">被OWebClient指定的url</param>
        /// <returns>返回StreamReader，报错返回null</returns>
        public static StreamReader getStreamReader(string url)
        {
            try
            {
                //安全套接字协议
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                using (OWebClient Client = new OWebClient())//调用完成释放资源
                {
                    Client.timeOut = 5000;
                    return new StreamReader(Client.OpenRead(url), Encoding.UTF8);//使用UTF8编码模式解码，然后返回流对象
                }
            }
            catch
            {
                return null;
            }

        }

        /// <summary>
        /// 获取url指定的OWebClient所赋值的StreamReader对象（重载二）
        /// </summary>
        /// <param name="url">被OWebClient指定的url</param>
        /// <param name="encodingType">使用的编码模式</param>
        /// <returns>返回StreamReader，报错返回null</returns>
        public static StreamReader getStreamReader(string url, string encodingType)
        {
            try
            {
                //安全套接字协议
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Ssl3 | SecurityProtocolType.Tls | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls12;

                using (OWebClient Client = new OWebClient())//调用完成释放资源
                {
                    Client.timeOut = 5000;
                    return new StreamReader(Client.OpenRead(url), Encoding.GetEncoding(encodingType));//使用UTF8编码模式解码，然后返回流对象
                }
            }
            catch
            {
                return null;
            }

        }

        /// <summary>
        /// 获取联网信息
        /// （注意：一旦取到空值，该方法将自动返回自定义URL所取得的信息（重载二被执行））
        /// </summary>
        /// <returns>返回获得的信息，报错返回null</returns>
        private static string[] pvtGetHtmlLibInformation()
        {
            try
            {
                LibFrameInfo LIF = new LibFrameInfo(null);
                string[] result = getStreamReader(LIF.HlinfURL).ReadToEnd().Split('$');

                if (result == null || result[0] == null || result[1] == null || result[2] == null)//如果获取到空值
                {
                    return pvtGetHtmlLibInformation(SubHlinfURL);//返回重载二
                }
                else { return result; }//返回查询结果
            }
            catch
            {
                return pvtGetHtmlLibInformation(SubHlinfURL);//返回重载二
            }

        }

        /// <summary>
        /// 获取联网信息（重载二）
        /// </summary>
        /// <param name="url">信息所在的URL地址</param>
        /// <returns>返回获得的信息，报错返回“string[] { "null", "null" }”数组</returns>
        private static string[] pvtGetHtmlLibInformation(string url)
        {
            try
            {
                return getStreamReader(url).ReadToEnd().Split('$'); ;
            }
            catch
            {
                return new string[] { "null", "null" };
            }
        }

        /// <summary>
        /// 通过json文件获得类库信息（重载一）
        /// </summary>
        ///<param name="url">json文件所在url</param>
        /// <returns>返回存有类库信息的JlinfObject，错误则返回null</returns>
        public JlinfObject getJsonLibInformation(string url)
        {
            try
            {
                //序列化/反序列化对象JavaScriptSerializer
                //转换json为JlinfObject对象并返回
                return new JavaScriptSerializer().Deserialize<JlinfObject>(getStreamReader(url).ReadToEnd());
            }
            catch
            {
                return null;
            }
        }

        /// <summary>
        /// 通过json文件获得类库信息（重载二）
        /// </summary>
        /// <param name="filePath">json文件所在的本地物理路径</param>
        /// <param name="bufferSize">文件流缓冲区大小，默认值可填4096</param>
        /// <param name="useAsync">使用异步初始化文件流，缺乏设计的异步调用会慢于串行调用</param>
        /// <returns>返回存有类库信息的JlinfObject，错误则返回null</returns>
        public JlinfObject getJsonLibInformation(string filePath, int bufferSize, bool useAsync)
        {
            try
            {
                using (
                    StreamReader StreamReader = new StreamReader//流读取对象
                    (new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.Write, bufferSize, useAsync)//文件流对象
                    , Encoding.GetEncoding("unicode"))//指定编码模式，为保证兼容，这里使用unicode
                        )
                {
                    //序列化/反序列化对象JavaScriptSerializer
                    //转换json为JlinfObject对象并返回
                    return new JavaScriptSerializer().Deserialize<JlinfObject>(StreamReader.ReadToEnd().ToString());
                }
            }
            catch
            {
                return null;
            }
        }
    }
}
SELECT
	`pala_text_index`.`text_id` AS `text_id`,
	`pala_text_index`.`text_type` AS `text_type` 
FROM
	`pala_text_index` 
WHERE
	( `pala_text_index`.`text_mode` = 'onshow' ) 
ORDER BY
	`pala_text_index`.`text_id` DESC
    SELECT
	`pala_text_index`.`text_id` AS `text_id`,
	`pala_text_index`.`text_type` AS `text_type` 
FROM
	`pala_text_index` 
WHERE
	( ( `pala_text_index`.`text_type` = 'page' ) AND ( `pala_text_index`.`text_mode` = 'onshow' ) ) 
ORDER BY
	`pala_text_index`.`text_id` DESC
    SELECT
	`pala_text_index`.`text_id` AS `text_id`,
	`pala_text_index`.`text_type` AS `text_type` 
FROM
	`pala_text_index` 
WHERE
	( ( `pala_text_index`.`text_type` = 'post' ) AND ( `pala_text_index`.`text_mode` = 'onshow' ) ) 
ORDER BY
	`pala_text_index`.`text_id` DESC
    SELECT
	`pala_text_main`.`text_id` AS `text_id`,
	`pala_text_main`.`text_title` AS `text_title`,
	`pala_text_main`.`text_summary` AS `text_summary`,
	`pala_text_main`.`text_content` AS `text_content` 
FROM
	( `pala_text_index` JOIN `pala_text_main` ) 
WHERE
	( ( `pala_text_main`.`text_id` = `pala_text_index`.`text_id` ) AND ( `pala_text_index`.`text_mode` = 'onshow' ) ) 
ORDER BY
	`pala_text_main`.`text_id` DESC
    SELECT
	`pala_text_sub`.`text_id` AS `text_id`,
	`pala_text_sub`.`text_archiv` AS `text_archiv`,
	`pala_text_sub`.`text_editor` AS `text_editor`,
	`pala_text_sub`.`date_created` AS `date_created`,
	`pala_text_sub`.`date_changed` AS `date_changed`,
	`pala_text_sub`.`count_pv` AS `count_pv`,
	`pala_text_sub`.`count_comment` AS `count_comment`,
	`pala_text_sub`.`count_star` AS `count_star`,
	`pala_text_sub`.`tags` AS `tags`,
	`pala_text_sub`.`cover_url` AS `cover_url` 
FROM
	( `pala_text_index` JOIN `pala_text_sub` ) 
WHERE
	( ( `pala_text_sub`.`text_id` = `pala_text_index`.`text_id` ) AND ( `pala_text_index`.`text_mode` = 'onshow' ) ) 
ORDER BY
	`pala_text_sub`.`text_id` DESC
    CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `get>main`( IN `text_id` INT )
BEGIN
SELECT
	* 
FROM
	`view>main` 
WHERE
	( `view>main`.`text_id` = text_id );

END
CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `get>root`( IN `root_id` INT )
BEGIN
SELECT
	* 
FROM
	`pala_root` 
WHERE
	( `pala_root`.`root_id` = root_id );

END
CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `get>sub`( IN `text_id` INT )
BEGIN
SELECT
	* 
FROM
	`view>sub` 
WHERE
	( `view>sub`.`text_id` = text_id );

END
CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `match<main.content`( IN `str` TINYTEXT )
BEGIN
SELECT
	`view>main`.`text_id` 
FROM
	`view>main`,
	`view>index` 
WHERE
	(
	( `view>main`.`text_id` = `view>index`.`text_id` ) 
	AND ( `view>main`.`text_content` LIKE concat( '%', @str, '%' ) ) 
	);

END
CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `match<main.summary`( IN `str` TINYTEXT )
BEGIN
SELECT
	`view>main`.`text_id` 
FROM
	`view>main`,
	`view>index` 
WHERE
	(
	( `view>main`.`text_id` = `view>index`.`text_id` ) 
	AND ( `view>main`.`text_summary` LIKE concat( '%', @str, '%' ) ) 
	);

END
CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `match<main.title`( IN `str` TINYTEXT )
BEGIN
SELECT
	`view>main`.`text_id` 
FROM
	`view>main`,
	`view>index` 
WHERE
	(
	( `view>main`.`text_id` = `view>index`.`text_id` ) 
	AND ( `view>main`.`text_title` LIKE concat( '%', @str, '%' ) ) 
	);

END
CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `random>index`( IN `excluded_text_id` INTEGER, IN `text_type` VARCHAR ( 8 ) )
BEGIN
SELECT
	* 
FROM
	`pala_text_index` 
WHERE
	(
	(
	`pala_text_index`.`text_id` >= (
	
	( ( SELECT MAX( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) - ( SELECT MIN( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) ) * RAND( ) 
	 + ( SELECT MIN( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) 
	) 
	) /* 展示可用 */
	
	AND ( `pala_text_index`.`text_mode` = 'onshow' ) /* 排除不参与随机取样的文章 */
	
	AND ( `pala_text_index`.`text_id` <> excluded_text_id ) 
	AND ( `pala_text_index`.`text_type` = text_type ) 
	) /* 从第一位置取一条记录 */
	
	LIMIT 2,
	1;

END
CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `random>index.page`(IN excluded_text_id INTEGER )
BEGIN
SELECT
	* 
FROM
	`pala_text_index` 
WHERE
	(
	(
	`pala_text_index`.`text_id` >= (
	
	( ( SELECT MAX( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) - ( SELECT MIN( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) ) * RAND( ) 
	+ ( SELECT MIN( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) 
	) 
	) /* 展示可用 */
	
	AND ( `pala_text_index`.`text_mode` = 'onshow' ) /* 排除不参与随机取样的文章 */
	
	AND ( `pala_text_index`.`text_id` <> excluded_text_id ) 
	AND ( `pala_text_index`.`text_type` = 'page' ) 
	) /* 从第一位置取一条记录 */
	
	LIMIT 2,
	1;

END
CREATE DEFINER=`pala_database_user`@`localhost` PROCEDURE `random>index.post`(IN excluded_text_id INTEGER )
BEGIN
SELECT
	* 
FROM
	`pala_text_index` 
WHERE
	(
	(
	`pala_text_index`.`text_id` >= (
	
	( ( SELECT MAX( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) - ( SELECT MIN( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) ) * RAND( ) 
  + ( SELECT MIN( `pala_text_index`.`text_id` ) FROM `pala_text_index` ) 
	) 
	) /* 展示可用 */
	
	AND ( `pala_text_index`.`text_mode` = 'onshow' ) /* 排除不参与随机取样的文章 */
	
	AND ( `pala_text_index`.`text_id` <> excluded_text_id ) 
	AND ( `pala_text_index`.`text_type` = 'post' ) 
	) /* 从第一位置取一条记录 */
	
	LIMIT 2,
	1;

END
CREATE DEFINER=`pala_database_user`@`localhost` FUNCTION `random>number`( start_num INTEGER, end_num INTEGER ) RETURNS int(11)
BEGIN

RETURN FLOOR( start_num + RAND( ) * ( end_num - start_num + 1 ) );

END
<!DOCTYPE html>
<html lang="zh-CN">

<head>
  <meta http-equiv="Content-type" Content="text/html;charset=UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <base target="_blank">
  <title>Thaumy的小破站|又一个码农的家</title>

  <link rel="stylesheet" href="ui_css/global.css">
  <link rel="stylesheet" href="ui_css/basic.css">
  <link rel="stylesheet" href="ui_css/Box.css">
  <link rel="stylesheet" href="ui_css/Btn.css">

  <link rel="stylesheet" href="ui_css/more/vs2015.css">

  <script type="text/javascript" src="https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"></script>
  <script type="text/javascript" src="https://cdn.bootcss.com/typed.js/2.0.10/typed.min.js"></script>
  <script type="text/javascript" src="https://cdn.bootcss.com/highlight.js/9.15.10/highlight.min.js"></script>

  <script type="text/javascript" src="ui_js/basic.js"></script>
</head>

<body>
  <div class="fixed">

    <div class="NavLine L M bSha b50">
      <div onclick="up()" class="contain cur bRds">
        <div class="Avatar bSha"></div>
        <div class="Name">THAUMY的小站</div>
      </div>
      <div class="SiderBtn R" onclick="ListToggle()"></div>
    </div>

    <div class="SiderList bSha">
      <div class="Card cur bRds" onclick="up();ListToggle()">
        <div class="contain">白银御行</div>
      </div>
      <div class="Card cur bRds" onclick="up();ListToggle()">
        <div class="contain">白银御行</div>
      </div>
      <div class="Card cur bRds" onclick="up();ListToggle()">
        <div class="contain">白银御行</div>
      </div>
      <div class="Card cur bRds" onclick="up();ListToggle()">
        <div class="contain">白银御行</div>
      </div>
      <div class="Card cur bRds" onclick="up();ListToggle()">
        <div class="contain">白银御行</div>
      </div>
      <div class="Co cur">
        Thaumy的博客©2016-2019保留所有权利<br>
        基于pilipala构建<br>
        Field Theme Designed By Thaumy<br>
      </div>
    </div>

    <div class="Shadow" onclick="ListToggle()"></div>
    <div class="upBtn bSha bRds b55" style="display: none" onclick="up()"></div>

  </div>

  <div class="contain">
    <div class="NavCol bSha bRds b50">
      <div onclick="up()" class="contain bRds">
        <div class="Avatar bSha cur"></div>
        <div class="Name">THAUMY的小站</div>
        <div class="JieShao"><span class="jieshao"></span></div>
      </div>

      <div class="List">
        <div class="Card cur bRds" onclick="up()">
          <div class="contain">白银御行</div>
        </div>
        <div class="Card cur bRds" onclick="up()">
          <div class="contain">白银御行</div>
        </div>
        <div class="Card cur bRds" onclick="up()">
          <div class="contain">白银御行</div>
        </div>
        <div class="Card cur bRds" onclick="up()">
          <div class="contain">白银御行</div>
        </div>
        <div class="Card cur bRds" onclick="up()">
          <div class="contain">白银御行</div>
        </div>
      </div>

      <div class="Co cur">
        Thaumy的博客©2016-2019保留所有权利<br>
        基于pilipala构建<br>
        Field Theme Designed By Thaumy<br>
      </div>
    </div>

    <div class="CardCol R">

      <div class="Card L M bSha bRds">

        <div onclick="up()" class="contain L cur w250">
          <img class="pXL" src="http://thblog-img.test.upcdn.net/md-img/field2cg.jpg" />
          <div class="Title">氛</div>
          <div class="Summary">Make a simple, intuitive UI</div>
        </div>

        <div class="AtBox L">
          <div class="Date">2019/07/12</div>
          <div class="Pv">12345</div>
          <div class="Comment">12345</div>
          <div class="Star">12345</div>
          <div class="Time">周四 07:12</div>
          <div class="Archiv">氛归档</div>
          <div class="Tag">氛标签</div>
        </div>
      </div>

      <div class="Card L M bSha bRds">

        <div onclick="up()" class="contain L cur w250">
          <div class="Title">PILIPALA BETA7</div>
          <div class="Summary">理所当然的奇迹</div>
        </div>

        <div class="AtBox L">
          <div class="Date">2019/07/12</div>
          <div class="Pv">12345</div>
          <div class="Comment">12345</div>
          <div class="Star">12345</div>
          <div class="Time">周四 07:12</div>
          <div class="Archiv">Archiv</div>
          <div class="Tag">Tag</div>
        </div>
      </div>

      <div class="Card L M bSha bRds">
        <div class="contain L bRds w250">
          <div class="Title">四宫辉夜</div>
          <div class="Summary">Shinomiya Kaguya</div>
          <div class="Content bRds">

            <h3>!>>>图片测试</h3>

            <img class="pM" src="http://thblog-img.test.upcdn.net/md-img/Kaguya_winter.jpg" />
            <img class="pL" src="http://thblog-img.test.upcdn.net/md-img/Kaguya_winter.jpg" />
            <img class="pS" src="http://thblog-img.test.upcdn.net/md-img/Kaguya_winter.jpg" />
            <img class="pXL" src="http://thblog-img.test.upcdn.net/md-img/Kaguya_winter.jpg" />

            <h3>!>>>中文测试</h3>

            <h1>四宮輝夜 Shinomiya Kaguya</h1>
            <h2>简介</h2>
            <blockquote>
              四宫辉夜是秀知院学园高中部2年A班学生，学生会副会长。是总资产200兆万亿日元、旗下子公司破千、被视为四大财阀之一的四宫集团的大小姐，有三个哥哥。
            </blockquote>
            学业优秀，是一个在茶道、花道、舞蹈、古筝、合气道、薙刀、弓道等方面皆有出色成绩的全能型天才，其中弓道在二年级就升到了四段，初中便拿到全国大赛一等奖，曾在决胜阶段连续射中十次,但升入高中后因比赛与圣诞节冲突便再也没有参加。<br>
            住在四宫家位于东京的别墅，出门有专车接送、便当是专属厨师制作，是个“盒中的女孩（箱入り娘）”，过着与世俗无缘的生活的同时很向往庶民的生活，是个IT白痴性知识也极度缺乏。<br>
            以大约一月一个的速度被人告白。<br>
            非常适合猫耳。
            <h2>性格</h2>
            在四宫家的教育下，是一个利己主义者，同时对自己立下的规矩绝不违背。总是不自觉的露出看低别人的表情。<br>
            因性格冰冷而被当成难以靠近的冰山美人、深闺公主，在加入学生会后渐渐变得温柔和沙雕，少女心的一面渐渐多了起来。<br>
            自尊心极高，喜欢白银御行和他凶狠的眼神熬夜的黑眼圈，一直不愿承认。“但喜欢的话一定是真爱。”<br>
            经常主动采取措施逼迫白银御行告白，但常常被藤原千花干扰。到后来甚至会太喜欢白银御行得上“恋心病”。<br>
            嫉妒心极强，非常担忧白银御行的女性朋友增多。<br>
            生病时会变得很爱撒娇，但是痊愈后会将这个事情完全忘记。如白银去探病时，直接被辉夜逆推，但辉夜病好之后发现白银在她的床上时，是立刻恢复元气，将白银踹离她的闺房。不过其实这期间白银根本没有做出逾矩的事情，很单纯的只是因睡眠不足而睡着而已。

            <h3>!>>>英文测试</h3>

            <h1>四宮輝夜 Shinomiya Kaguya</h1>
                        <h2>Introduction</h2>
                        Sigong Huiye is a class 2 student of the High School of Xiuzhiyuan Academy and a vice president
            of the Student Union. <br>
                        It is a young lady of the Sigong Group, which has a total asset of 200 trillion yen and a
            subsidiary of the company, and is regarded as one of the four major chaebols. There are three brothers. <br>
                        Excellent academic performance, is an all-round genius with outstanding achievements in tea
            ceremony, flower path, dance, guzheng, Aikido, sickle, bow and so on. Among them, the bow road has risen to
            the fourth stage in the second grade, and the junior high school won the national competition. After winning
            the prize, he once shot ten times in the final stage of the tie-break, but he did not participate in the
            game because of the conflict with the Christmas. <br>
                        I live in a villa in Tokyo where the Four Palaces are located. There is a private car to pick up
            the car. The lunch is made by a dedicated chef. It is a "girl in the box (box into the mother-in-law)". It
            is an IT idiot who lives a long-term life with the world. Sexual knowledge is also extremely lacking. <br>
                        It was confessed at a speed of about one month. <br>
                        Great for cat ears.
                        <h2>Charity</h2>
                        Under the education of the Sigong family, it is an egoist, and at the same time, it does not
            violate the rules set by himself. Always unconsciously revealing the expression of others. <br>
                        Because of her cold personality, she was regarded as an inaccessible iceberg beauty and a deep
            princess. After joining the student union, she gradually became gentle and sand sculpture, and the girl’s
            heart gradually increased. <br>
                        Self-respect is very high, like the silver imperial line and his fierce eyes, dark circles
            around the night, has been reluctant to admit. "But if you like it, it must be true love."<br>
                        I often take the initiative to force the silver confession, but it is often interfered by
            Fujiwara. Later, I would even like the "golden heart disease" in the silver royal line. <br>
                        I am very worried, and I am very worried about the increase in female friends of the Bank. <br>
                        When you are sick, you will become very fond of being spoiled, but after you recover, you will
            completely forget this. For example, when silver went to the hospital, it was directly pushed back by Hui
            Ye, but when the night was sick, it was discovered that when silver was in her bed, it immediately recovered
            her vitality and removed the silver from her boudoir. However, in fact, during this period, silver did not
            make any over-the-top things. It was purely just because of lack of sleep and fell asleep.

            <pre>Visual C# <code>public DataTable getTable(MySqlConnection MySqlConnection, string sql)
    {
        //新建数据适配器
        MySqlDataAdapter myDA = new MySqlDataAdapter(sql, MySqlConnection);
    
        if (MySqlConnection.State == ConnectionState.Closed)//检测是否开启
        {
            MySqlConnection.Open();
        }
    
        //新建数据表
        DataTable table = new DataTable();
        myDA.Fill(table);//填充数据到table
    
        return table;
    }</code></pre>


          </div>

          <div onclick="up()" class="nxtBtn L bRds cur">藤原千花</div>
          <div onclick="up()" class="pvsBtn R bRds cur">石上优</div>
        </div>
        <!-- 代码高亮启用 -->
        <script>
          hljs.initHighlighting.called = false;
          hljs.initHighlighting();
        </script>
      </div>

      <div class="CoBox L M bSha b50">

        <span class="text_auth L">由ThaumyCX2最后编辑于19.04.05</span>
        <span class="text_mId R">004C01E</span>

        <div class="AtBox L bRds w250">
          <div class="Date">2019/07/12</div>
          <div class="Pv">12345</div>
          <div class="Comment cur">12345</div>
          <div class="Star cur">12345</div>
          <div class="Time">周四 07:12</div>
          <div class="Archive">氛归档</div>
          <div class="Tag">氛标签</div>
        </div>
      </div>

      <div class="CommentBox L bSha bRds w250">
        <div>评论(暂不可用)</div>
        <div style="font-size: 14px">-comments-</div>
      </div>

    </div>
  </div>

  <link rel="stylesheet" type="text/css" href="http://raw.githack.com/Thaumy/Blog/master/build/css/mrks.css">
  <link rel="stylesheet" type="text/css" href="http://raw.githack.com/Thaumy/Blog/master/build/css/wrds.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Noto+Sans+SC:300,400">
  <link rel="stylesheet" href="https://fonts.font.im/css?family=Roboto+Mono">
</body>

<script type="text/javascript" src="ui_js/jieshao.js"></script>

<script type="text/javascript">
  /* 返顶按钮淡入淡出 */
  $(window).scroll(function () {
    if ($(window).scrollTop() > 1000) {
      $(".upBtn").fadeIn(350);
    }
    else {
      $(".upBtn").fadeOut(350);
    }
  });
</script>

<script type="text/javascript">
  /* 向上滚动NavLine展开 */
  var p = 0; t = 0;
  $(window).scroll(debounce(function () {
    /* 触发宽度 */
    if ($(window).width() < 1000) {
      p = $(this).scrollTop();
      if (t <= p) {
        /* 防止触发遮住文本首部 */
        if ($(window).scrollTop() >= 20) {
          $(".NavLine").slideUp(200);
        }
      }
      else {
        /* 触发高度：小于20或大于200 */
        if ($(window).scrollTop() <= 20 | $(window).scrollTop() >= 200) {
          $(".NavLine").slideDown(150);
        }
      }
      t = p;
    } else {
      $(".NavLine").slideUp(200);
    }
  }, 50))

  /* 触发宽度外，收起NavLine */
  $(window).resize(function () {
    if ($(window).width() >= 1000) {
      $(".NavLine").slideUp(200);
    }
  });
</script>

<script type="text/javascript">
  /* 侧边菜单展开 */
  function ListToggle() {
    if ($(".SiderList").css("left") == "-800px") {
      $("body").css("overflow", "hidden");/* 禁用滚动 */

      fadeInX2(".Shadow", function () { });
      $(".SiderBtn").slideUp(300);
      slideRight2X(".SiderList");

    }

    if ($(".SiderList").css("left") == "12px") {
      $("body").css("overflow", "unset");/* 启用滚动 */

      fadeOutX2(".Shadow", function () {
        $(".SiderBtn").slideDown(400);
      });
      slideLeft2X(".SiderList");

    }
  }
</script>

</html>
var typed = new Typed('.jieshao', {
    strings: ['欢迎欢迎~~^200', '很高兴^100你能来我的^100小破站瞧一瞧!^200', '二次元业余码农一個~^200', '这里^150是我的博客!', '又一个码农的家', '又一个码农的家.', '又一个码农的家..', '又一个码农的家...'],
    typeSpeed: 100,
    backSpeed: 0,
    smartBackspace: true,
    loop: false
});
/* 函数节流 */
function throttle(fn, wait) {
    let lastTime = 0
    return function () {
        let nowTime = new Date.getTime()
        if (nowTime - lastTime > wait) {
            fn.apply(this, arguments)
            lastTime = nowTime
        }
    }
}

/* 函数防抖 */
function debounce(fn, dealy) {
    let timer = null
    return function () {
        clearTimeout(timer)
        timer = setTimeout(function () {
            fn.apply(this, arguments)
        }, dealy)
    }
}

/* 返回顶部 */
function up() {
    $('body,html').animate({ scrollTop: 0 }, 200);
}

/* 二段淡入 */
function fadeInX2(obj, fn) {
    $(obj).fadeTo(300, 0.3, function () {
        fn.apply();
        $(obj).fadeTo(260, 0.6, fn);
    });
}

/* 二段淡出 */
function fadeOutX2(obj, fn) {
    $(obj).fadeTo(260, 0.5, function () {
        fn.apply();
        $(obj).fadeOut(200);
    });
}

/* 二段右滑 */
function slideRight2X(obj) {
    $(obj).animate({
        opacity: 1,
        left: '-30px'
    }, 300, function () {
        $(obj).animate({
            left: '12px'
        }, 260);
    });
}

/* 二段左滑 */
function slideLeft2X(obj) {
    $(obj).animate({
        left: '-30px'
    }, 260, function () {
        $(obj).animate({
            opacity: 0,
            left: '-800px'
        }, 200);
    });
}
html {
    background: url("http://thblog-img.test.upcdn.net/ui-background/pc.jpg") fixed;
    background-size: cover;
}

html::-webkit-scrollbar {
    display: none;
}

body>.contain {
    margin: auto;
    max-width: 1188px;
}

body {
    font-family: 'Noto Sans SC', sans-serif;
    font-weight: 300;

    margin: 0;
}

blockquote {
    color: #666;
    border-left: 4px solid rgba(0, 120, 215, 1);
    background: rgba(255, 255, 255, 1);

    padding-left: 20px;
    margin-left: 0;
    margin-right: 0;
}

@font-face {
    font-family: 'labelico';
    src: url('../ui_img/labelico/labelico.eot'), url('../ui_img/labelico/labelico.woff'), url('../ui_img/labelico/labelico.svg');
    font-display: swap;
}

/* 屏幕宽度大于1000时 */
@media screen and (min-width: 1000px) {
    body>.contain {
        padding-top: 10px;
    }
    html {
        background: url("http://thblog-img.test.upcdn.net/ui-background/pc.jpg") fixed;
        background-size: cover;
    }
}

/* 屏幕宽度小于1000时 */
@media screen and (max-width: 1000px) {
    body>.contain {
        padding: 7px;
        padding-top: 57px;
    }
    html {
        background: url("http://thblog-img.test.upcdn.net/ui-background/mobi.jpg") fixed;
        background-size: contain;
    }
}
@import "./Btn/SiderBtn.css";
@import "./Btn/pvsBtn.css";
@import "./Btn/upBtn.css";
@import "./Box/NavLine.css";
@import "./Box/NavCol.css";
@import "./Box/CardCol.css";
@import "./Box/AtBox.css";
@import "./Box/CoBox.css";
@import "./Box/CommentBox.css";
@import "./Box/SiderList.css";
@import "./Box/CodeBox.css";
.b50 {
    background: rgba(50, 50, 50, 1.00);
}

.b55 {
    background: rgba(55, 55, 55, 1.00);
}

.w250 {
    background: rgba(250, 250, 250, 1.00);
}

.L {
    float: left;
}

.R {
    float: right;
}

/* 屏幕宽度大于1000时 */
@media (min-width: 1000px) {
    .M {
        margin-bottom: 12px;
    }
}

/* 屏幕宽度小于1000时 */
@media (max-width: 1000px) {
    .M {
        margin-bottom: 7px;
    }
}

.bSha {
    box-shadow: 0px 0px 3px 0.2px rgba(0, 0, 0, 0.4);
}

.bRds {
    border-radius: 4px;
}

.pS {
    width: 30%;
}
.pM {
    width: 40%;
}
.pL {
    width: 60%;
}
.pXL {
    width: 100%;
}

.cur {
    cursor: pointer;
}
.upBtn {
    text-align: center;
    line-height: 28px;

    position: fixed;
    z-index: 1;
    bottom: 10%;

    cursor: pointer;
}

.upBtn::before {
    font-family: 'labelico';
    color: #FFFFFF;
    content: "\e3005";
}

/* 屏幕宽度大于1490时 */
@media (min-width: 1490px) {
    .upBtn {
        font-size: 22px;
        
        width: 60px;
        padding-top: 9px;
        padding-bottom: 9px;

        right: 6%;
    }
}

/* 屏幕宽度大于1000，小于1490时 */
@media (max-width: 1490px) and (min-width:1000px) {
    .upBtn {
        font-size: 22px;

        width: 50px;
        padding-top: 7px;
        padding-bottom: 7px;

        right: 2%;
    }
}

/* 屏幕宽度小于1000时 */
@media (max-width: 1000px) {
    .upBtn {
        font-size: 18px;

        width: 50px;
        padding-top: 6px;
        padding-bottom: 6px;

        left: 2%;
    }
}
.SiderBtn {
    font-size: 26px;
    line-height: 50px;

    color: #FFFFFF;
}

.SiderBtn::before {
    font-family: 'labelico';
   
    margin: 12px;
    content: "\e3016";
}
.nxtBtn,
.pvsBtn {

    color: rgba(1, 153, 255, 1);
    font-size: 17px;
    line-height: 17px;

    margin: 3px;
    padding: 3px;

    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}

.nxtBtn {
    padding-right: 6px;
    padding-left: 0px;
}

.pvsBtn {
    padding-left: 6px;
    padding-right: 0px;
}

.nxtBtn::before,
.pvsBtn::after {
    font-family: 'labelico';
    font-size: 14px;
    color: rgba(1, 153, 255, 1);
}

.nxtBtn::before {
    content: "\e3012";
}

.pvsBtn::after {
    content: "\e3013";
}
.SiderList {
    width: 60%;
    z-index: 2;

    border-radius: 4px;
    padding-top: 12px;
    padding-bottom: 12px;

    top: 62px;
    left: -800px;

    position: fixed;

    background: rgba(50, 50, 50, 1);
}

.SiderList>.Card {
    width: 94%;
    height: 36px;
    display: flex;

    margin: auto;

    margin-bottom: 8px;

    color: rgba(250, 250, 250, 1);
    font-size: 17px;
    letter-spacing: 1px;
}

.SiderList>.Card::after {
    align-self: center;
    margin-right: 3px;

    font-family: 'labelico';
    font-size: 16px;
    content: "\e3013";
}

.SiderList>.Card>.contain {
    margin-right: auto;
    align-self: center;
    margin-left: 10px;
}

.SiderList>.Co {
    width: 88%;
    text-align: center;

    margin: auto;
    margin-top: 16px;
    margin-bottom: 8px;

    color: #FFFFFF;
    font-size: 11px;
    line-height: 16px;
}

.Shadow {
    display: none;
    z-index: 1;

    width: 100%;
    height: 100%;

    position: fixed;
    top: 0;
    left: 0;

    background: rgba(0, 0, 0);
}

/* 屏幕宽度大于1000时 */
@media (min-width: 1000px) {
    .SiderList {
        display: none;
    }
}

/* 屏幕宽度小于1000时 */
@media (max-width: 1000px) {
    .SiderList {
        display: unset;
    }
}
.NavLine {
    height: 50px;
    width: 100%;
    position: fixed;
}

.NavLine>.contain>.Name {
    float: left;
    width: 190px;

    font-size: 20px;
    line-height: 50px;
    color: rgba(250, 250, 250, 1);
}

.NavLine>.contain>.Avatar {
    float: left;
    width: 50px;
    height: 42px;
    margin: 4px;
    margin-right: 10px;
    
    background: transparent url("http://thblog-img.test.upcdn.net/ui_img/p200.jpg");
    background-position: center;
    background-size: cover;

    border-radius: 50px;
}

/* 屏幕宽度大于1000时 */
@media (min-width: 1000px) {
    .NavLine {
        display: none;
    }
}

/* 屏幕宽度小于1000时 */
@media (max-width: 1000px) {
    .NavLine {
        display: block;
    }
}
.NavCol {
    color: rgba(250, 250, 250, 1.00);
}

.NavCol>.contain {
    padding-top: 60px;

    box-shadow: 0px 0px 3px 0.5px rgba(0, 0, 0, 0.4);
}

.NavCol>.contain>div {
    margin: auto;
}

.NavCol>.contain>.Avatar {
    width: 120px;
    height: 120px;

    margin-bottom: 40px;
    
    background: transparent url("http://thblog-img.test.upcdn.net/ui_img/p200.jpg");
    background-position: center;
    background-size: cover;

    border-radius: 100px;
}

.NavCol>.contain>.Name {
    width: 94%;
    text-align: center;
    font-size: 22px;
}

.NavCol>.contain>.JieShao {
    width: 98%;
    text-align: center;
    font-size: 17px;

    margin-top: 12px;

    padding-top: 12px;
    padding-bottom: 24px;
}

.NavCol>.contain>.JieShao::before {
    margin-right: 6px;
    font-family: "labelico";
    content: '\e3010';
    font-size: 12px;
}

.NavCol>.contain>.JieShao::after {
    margin-left: 6px;
    font-family: "labelico";
    content: '\e3003';
    font-size: 12px;
}

.NavCol>.List {
    margin-top: 8px;
}

.NavCol>.List>.Card {
    width: 94%;
    height: 52px;
    display: flex;

    margin: auto;

    margin-bottom: 8px;

    font-size: 17px;
    letter-spacing: 1px;

    transition-duration: 0.2s;
    transition-timing-function: ease;
}

.NavCol>.List>.Card:hover {
    background: rgba(41, 41, 41, 1);

    transition-duration: 0.2s;
    transition-timing-function: ease;
}

.NavCol>.List>.Card::after {
    align-self: center;
    margin-right: 3px;

    font-family: 'labelico';
    content: "\e3013";
}

.NavCol>.List>.Card>.contain {
    margin-right: auto;
    align-self: center;
    margin-left: 10px;
}

.NavCol>.Co {
    width: 88%;
    text-align: center;

    margin: auto;
    margin-top: 16px;
    margin-bottom: 16px;

    color: #FFFFFF;
    font-size: 12px;
    line-height: 17px;
}

/* 屏幕宽度大于1000时 */
@media screen and (min-width: 1000px) {
    .NavCol {
        width: 26%;
        max-width: 307px;
    
        position: fixed;
    }
}
/* 屏幕宽度小于1000时 */
@media screen and (max-width: 1000px) {
    .NavCol {
        display: none;
    }
}
.CommentBox {
    width: 100%;

    padding-top: 10px;
    padding-bottom: 6px;
    margin-bottom: 160px;

    text-align: center;
    font-size: 22px;
    line-height: 18px;

    position: relative;
}
pre{
    border-radius: 2px;
    margin: 0;

    font-family: 'Roboto Mono', monospace;
    font-size: 16px;

    line-height: 20px;
    text-align: right;
    white-space:pre-wrap;

    color: rgba(250, 250, 250, 1.00);
    background: rgba(180, 180, 180, 1.00);
}

code{
    text-align: left;
    font-family: 'Roboto Mono', monospace;
    font-size: 16px;
    line-height: 20px;

    border-bottom-left-radius:2px;
    border-bottom-right-radius:2px;
}
.CoBox {
    width: 100%;

    font-size: 16px;
    color: rgba(250, 250, 250, 1.00);

    border-radius: 4px;
}

.CoBox>.AtBox>.Star {
    color: rgba(250, 250, 250, 1.00);
    background: rgba(255, 159, 0, 1.00);
}

.CoBox>.AtBox>.Comment {
    color: rgba(250, 250, 250, 1.00);
    background: rgb(12, 193, 185, 1.00);
}

.CoBox>.text_auth {
    margin-top: 6px;
    margin-left: 8px;
    
    letter-spacing: 1px;
    margin-right: 0;
}

.CoBox>.text_mId {
    font-family: 'Roboto Mono', monospace;
    letter-spacing: 2px;

    line-height: 14px;
    margin: 6px;

    font-size: 14px;

    border-radius: 4px;
}

.CoBox>.text_mId::before {
    font-family: 'labelico';
    content: "\e3015";

    display: table-cell;
}
.CardCol>.Card {
    width: 100%;
    background: url("http://thblog-img.test.upcdn.net/ui_img/gezi.jpg");
}

/* 屏幕宽度大于1000时 */
@media screen and (min-width: 1000px) {
    .CardCol>.Card {
        background-size: 20px 20px;
    }
}

/* 屏幕宽度小于1000时 */
@media screen and (max-width: 1000px) {
    .CardCol>.Card {
        background-size: 14px 14px;
    }
}
.CardCol>.Card>.contain {
    width: 100%;
    border-top-left-radius: 4px;
    border-top-right-radius: 4px;
}

.CardCol>.Card>.contain>.Title {
    font-size: 24px;
    line-height: 24px;

    padding-left: 12px;
    padding-bottom: 8px;
}

.CardCol>.Card>.contain>img {
    border-top-left-radius: 3px;
    border-top-right-radius: 3px;
    margin-bottom: -5px;
}

.CardCol>.Card>.contain>.Summary {
    color: rgba(79, 89, 89, 1.00);
    font-size: 15px;
    line-height: 15px;

    padding-left: 18px;
    padding-bottom: 12px;
}

/* 屏幕宽度大于1000时 */
@media (min-width: 1000px) {
    .CardCol>.Card>.contain>.Title {
        padding-top: 12px;
    }
}

/* 屏幕宽度小于1000时 */
@media (max-width: 1000px) {
    .CardCol>.Card>.contain>.Title {
        padding-top: 10px;
    }
}

.CardCol>.Card>.contain>.Content {
    background: rgba(245, 245, 245, 1);
    padding: 4px;

    font-size: 18px;
    line-height: 28px;
    word-break: break-word;
}

.CardCol>.Card>.contain>.Content>img {
    border-radius: 4px;
    box-shadow: 0px 0px 4px 0.4px rgba(0, 0, 0, 0.3);
}

/* 屏幕宽度大于1000时 */
@media screen and (min-width: 1000px) {
    .CardCol {
        width: 73%;<%/*  *//*  */<%/*  */
        max-width: 1000px;
    }
}

/* 屏幕宽度小于1000时 */
@media screen and (max-width: 1000px) {
    .CardCol {
        width: 100%;
    }
}
.AtBox {
    width: 100%;

    color: rgba(110, 110, 110, 1.00);
    padding-top: 3px;
    padding-bottom: 3px;
}

.AtBox>div {
    width: 21%;
    float: left;

    text-align: center;

    margin-left: 2%;
    margin-right: 2%;
    margin-top: 2px;
    margin-bottom: 2px;

    border-radius: 4px;
}

/* 屏幕宽度大于1000时 */
@media (min-width: 1000px) {
    .AtBox>div {
        font-size: 14px;
    }
}

/* 屏幕宽度小于1000时 */
@media (max-width: 1000px) {
    .AtBox>div {
        font-size: 12px;
    }
}

.AtBox>div::before {
    font-family: 'labelico';
    padding-right: 6px;
}

.AtBox>.Comment,
.AtBox>.Star {
    transition-duration: 0.2s;
    transition-timing-function: ease;
}

.AtBox>.Date::before {
    content: "\e3007";
}

.AtBox>.Pv::before {
    content: "\e3008";
}

.AtBox>.Comment::before {
    content: "\e3010";
}

.AtBox>.Star::before {
    content: "\e3014";
}

/* CoBox里的星星有不同的样式 */
.CoBox>.AtBox>.Star::before {
    content: "\e3014";
}

.AtBox>.Time::before {
    content: "\e3004";
}

.AtBox>.Archiv::before {
    content: "\e3001";
}

.AtBox>.Tag::before {
    content: "\e3006";
}
<?xml version="1.0" encoding="utf-8"?>

<!--
  有关如何配置 ASP.NET 应用程序的详细信息，请访问
  https://go.microsoft.com/fwlink/?LinkId=169433
-->
<configuration>
  <system.web>
    <compilation debug="true" targetFramework="4.5.2"/>
    <httpRuntime targetFramework="4.5.2"/>
    
    <!-- URL映射 -->
    <urlMappings enabled="true">
      <add url="~/Default.aspx" mappedUrl="~/pala_custom/theme/field2/cut/LIST.aspx"/>
    </urlMappings>
    
  </system.web>
  <!--  
  <system.codedom>
    <compilers>
      <compiler language="c#;cs;csharp" extension=".cs"
        type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.CSharpCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        warningLevel="4" compilerOptions="/langversion:6 /nowarn:1659;1699;1701"/>
      <compiler language="vb;vbs;visualbasic;vbscript" extension=".vb"
        type="Microsoft.CodeDom.Providers.DotNetCompilerPlatform.VBCodeProvider, Microsoft.CodeDom.Providers.DotNetCompilerPlatform, Version=2.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
        warningLevel="4" compilerOptions="/langversion:14 /nowarn:41008 /define:_MYTYPE=\&quot;Web\&quot; /optionInfer+"/>
    </compilers>
  </system.codedom>
  -->
</configuration>
<%@ Page Language="C#" AutoEventWireup="true" CodeBehind="Default.aspx.cs" Inherits="PILIPALA.Default" %>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;

using LibStruct.MySql;
using LibStruct.pilipala;
using dataUnit;
using basicUnit;
using businessUnit.pilipala;
using businessUnit.pilipala.UI;

namespace PILIPALA.pala_system.service
{
    /// <summary>
    /// Basic 的摘要说明
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消注释以下行。 
    // [System.Web.Script.Services.ScriptService]
    public class Basic : System.Web.Services.WebService
    {
        /* 数据库 */
        private mysqlConn mysqlConn;
        private PaDB paDB;

        /* 文章列表控制器 */
        private TextListH TextListH;
        /* 文章控制器 */
        private TextH TextH;

        public Basic()
        {
            paDB.MySqlConnH = new MySqlConnH();
            
            mysqlConn.user = "pala_database_user";
            mysqlConn.password = "pala_database_user_password";
            mysqlConn.dataSource = "localhost";
            mysqlConn.port = "3306";
            paDB.MySqlConnH.start(mysqlConn);
            paDB.dataBase = "pala_db";//测试库

            /*
            mysqlConn.user = "thaumy0tdymy";
            mysqlConn.password = "177BDE5";
            mysqlConn.dataSource = "localhost";
            mysqlConn.port = "3306";
            paDB.MySqlConnH.start(mysqlConn);
            paDB.dataBase = "thaumy0tdymy";//生产库
            */

            paDB.Tables = PaRoot.defaultTables();/* 以默认值确定表名 */
            paDB.Views = PaRoot.defaultViews();/* 以默认值确定视图名 */

            TextListH = new businessUnit.pilipala.Edit.TextListH(paDB);
            TextH = new businessUnit.pilipala.Edit.TextH(paDB);

            //如果使用设计的组件，请取消注释以下行 
            //InitializeComponent(); 
        }
        #region TextListH

        public List<int> getTextIDList()
        {
            return TextListH.getTextIDList();
        }
        public List<int> getTextIDList(string text_type)
        {
            return TextListH.getTextIDList(text_type);
        }

        public List<int> stepTextIDList(int row, int rowLength)
        {
            return TextListH.stepTextIDList(row, rowLength);
        }
        public List<int> stepTextIDList(int row, int rowLength, string text_type)
        {
            return TextListH.stepTextIDList(row, rowLength, text_type);
        }

        #endregion
        #region TextH

        public PaText getTextMain(int text_id)
        {
            return TextH.getTextMain(text_id);
        }
        public PaText getTextSub(int text_id)
        {
            return TextH.getTextSub(text_id);
        }

        public string getTextTitle(int text_id)
        {
            return TextH.getTextTitle(text_id);
        }
        public string getTextSummary(int text_id)
        {
            return TextH.getTextSummary(text_id);
        }
        public string getTextContent(int text_id)
        {
            return TextH.getTextContent(text_id);
        }

        public int nextTextID(int current_text_id)
        {
            return TextH.nextTextID(current_text_id);
        }
        public int prevTextID(int current_text_id)
        {
            return TextH.prevTextID(current_text_id);
        }

        [WebMethod]
        public bool update_countPv(int text_id, int value)
        {
            return TextH.update_countPv(text_id, value);
        }
        [WebMethod]
        public bool update_countStar(int text_id, int value)
        {
            return TextH.update_countStar(text_id, value);
        }

        #endregion

        public static PaText fill(PaText TextMain, PaText TextSub)
        {
            return PaFn.fill(TextMain, TextSub);
        }
        public static string toMD5(string str)
        {
            return BasicMethod.toMD5(str);
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;

using PILIPALA.pala_system.service;

namespace PILIPALA.pala_custom.theme.field2.web_service
{
    /// <summary>
    /// FieldService 的摘要说明
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]

    // 若要允许使用 ASP.NET AJAX 从脚本中调用此 Web 服务，请取消注释以下行。 
    // [System.Web.Script.Services.ScriptService]
    [System.Web.Script.Services.ScriptService]

    public class FieldService : System.Web.Services.WebService
    {

        /// <summary>
        /// 到 日期
        /// </summary>
        /// <param name="DateTime">时间对象</param>
        [WebMethod]
        public static string toTime1(DateTime DateTime, string str)
        {
            //年份只取后二位：2099=>99
            return Convert.ToString(DateTime.Year).Substring(2, 2) + str + DateTime.Month + str + DateTime.Day;
        }
        /// <summary>
        /// 到 周几+时间
        /// </summary>
        /// <param name="DateTime">时间对象</param>
        [WebMethod]
        public static string toTime2(DateTime DateTime)
        {
            //年份只取后二位：2099=>99
            string DayInCN = "未知";
            switch (DateTime.DayOfWeek.ToString())
            {
                case "Monday": DayInCN = "周一"; break;
                case "Tuesday": DayInCN = "周二"; break;
                case "Wednesday": DayInCN = "周三"; break;
                case "Thursday": DayInCN = "周四"; break;
                case "Friday": DayInCN = "周五"; break;
                case "Saturday": DayInCN = "周六"; break;
                case "Sunday": DayInCN = "周日"; break;

                default: break;
            }
            return DayInCN + " " + DateTime.Hour + ":" + DateTime.Minute;
        }

        /// <summary>
        /// count_star计数减一
        /// </summary>
        /// <param name="text_id">文章序列号</param>
        [WebMethod]
        public int subs_countStar(int text_id)
        {
            Basic BasicService = new Basic();
            int count_star = BasicService.getTextSub(text_id).count_star;

            BasicService.update_countStar(text_id, count_star - 1);

            return count_star - 1;
        }
        /// <summary>
        /// count_star计数加一
        /// </summary>
        /// <param name="text_id">文章序列号</param>
        [WebMethod]
        public int plus_countStar(int text_id)
        {
            Basic BasicService = new Basic();
            int count_star = BasicService.getTextSub(text_id).count_star;

            BasicService.update_countStar(text_id, count_star + 1);

            return count_star + 1;
        }
        /// <summary>
        /// count_pv计数加一
        /// </summary>
        /// <param name="text_id">文章序列号</param>
        [WebMethod]
        public int plus_countPv(int text_id)
        {
            Basic BasicService = new Basic();
            int count_pv = BasicService.getTextSub(text_id).count_pv;

            BasicService.update_countPv(text_id, count_pv + 1);

            return count_pv + 1;
        }

        /// <summary>
        /// 数据库标签数据转字符串集合
        /// </summary>
        /// <param name="tags">标签文本</param>
        [WebMethod]
        public static List<string> toTags(string tags)
        {
            List<string> temp = new List<string>();
            foreach (string tag in tags.Split('$'))
            {
                temp.Add(tag);
            }
            return temp;
        }
    }
}
/* ajax查看文本 */
function showText(text_id) {
    $.ajax({
        type: "post",
        url: "/pala_custom/theme/field2/cut/CONTENT.aspx?text_id=" + text_id,
        data: "",
        dataType: "html",/* html返回类型 */
        success: function (result) {
            $(".CardCol").html($(result).find(".CardCol").html());

            refre_countPv(text_id);/* 刷新count_pv计数 */

            if ($.cookie('isStar' + text_id) == 'true') {/* 如果cookie显示目前文本已点赞 */
                starOpacity100();/* 透明度1 */
                $(".Star").text($(result).find(".Star").text());
            } else {
                starOpacity050();/* 透明度0.5 */
                $(".Star").text($(result).find(".Star").text());
            }
        }
    });
};

/* ajax返回首页 */
function showHome() {
    $.ajax({
        type: "post",
        url: "/pala_custom/theme/field2/cut/LIST.aspx",
        data: "",
        dataType: "html",/* html返回类型 */
        success: function (result) {
            $(".CardCol").html($(result).find(".CardCol").html());/* 以ajax异步请求到的页面.CardCol替换原有.CardCol */
        }
    });
};

/* ajax刷新count_star计数 */
function refre_countStar(text_id) {
    if ($.cookie('isStar' + text_id) == 'true') {/* 如果cookie显示目前文本已经点赞 */
        $.cookie('isStar' + text_id, 'false', { expires: 1 });/* 设置为取消点赞，并设置cookie时效（天） */
        $.ajax({
            type: "post",
            contentType: "application/json",
            url: "/pala_custom/theme/field2/web_service/FieldService.asmx/subs_countStar",
            data: "{text_id:" + text_id + "}",
            dataType: "json",/* json返回类型 */
            success: function (result) {
                starOpacity050();/* 透明度0.5 */
                $(".Star").text(result.d);
            }
        });
    } else {
        $.cookie('isStar' + text_id, 'true', { expires: 1 });
        $.ajax({
            type: "post",
            contentType: "application/json",
            url: "/pala_custom/theme/field2/web_service/FieldService.asmx/plus_countStar",
            data: "{text_id:" + text_id + "}",
            dataType: "json",/* json返回类型 */
            success: function (result) {
                starOpacity100();/* 透明度1 */
                $(".Star").text(result.d);
            }
        });
    }
};

/* ajax刷新count_pv计数 */
function refre_countPv(text_id) {
    if ($.cookie('isSaw' + text_id) == 'true') {/* 如果cookie显示目前文本已经浏览不做处理 */ }
    else {/* 未被浏览 */
        $.cookie('isSaw' + text_id, 'true', { expires: 1 });
        $.ajax({
            type: "post",
            contentType: "application/json",
            url: "/pala_custom/theme/field2/web_service/FieldService.asmx/plus_countPv",
            data: "{text_id:" + text_id + "}",
            dataType: "json",/* json返回类型 */
            success: function (result) {
                $(".Pv").text(result.d);
            }
        });
    }
};

/* ajax推进式文本列表加载 */
function loadText() {
    $.ajax({
        type: "post",
        url: "index.aspx?guide=0&text=1&row=" + $(".content2").length,
        data: "",
        dataType: "html",/* html返回类型 */
        success: function (result) {
            $("a").remove(".LoadPostBtn");
            $(".CardCol").html($(".CardCol").html() + $(result).find(".CardCol").html());
        }
    });
}

/* markdown转html */
function mkdConvert(mkdText) {
    var converter = new showdown.Converter();
    $(".CardCol>.Card>.contain>.Content").html(converter.makeHtml(mkdText));
};

function starOpacity050() {
    $(".AtBox").append("<style id=\"Star_tempstyle\">.CoBox>.AtBox>.Star:before{opacity: 0.5}</style>");
}
function starOpacity100() {
    $("#Star_tempstyle").remove();
}
<%@ Page
    Title=""
    Language="C#"
    MasterPageFile="~/pala_custom/theme/field2/cut/FRAME.Master"
    AutoEventWireup="true"
    CodeBehind="LIST.aspx.cs"
    Inherits="PILIPALA.pala_custom.theme.field2.cut.LIST" %>

<%@ Import Namespace="PILIPALA.pala_custom.theme.field2.web_service" %>

<asp:Content ID="Content1" ContentPlaceHolderID="RefreshBlock" runat="server">

    <%foreach (int text_id in BS.getTextIDList("post"))
        { %>
    <%LibStruct.pilipala.PaText PaText = BS.getTextSub(text_id); %>

    <div class="Card L M bSha bRds">
        <div onclick="up();showText(<%Response.Write(PaText.text_id); %>)" class="contain L cur bRds w250">

            <%if (PaText.cover_url != "")
                {  %>
            <img class="pXL" src="<%Response.Write(PaText.cover_url); %>" />
            <%} %>

            <div class="Title"><%Response.Write(BS.getTextTitle(text_id)); %></div>
            <div class="Summary"><%Response.Write(BS.getTextSummary(text_id)); %></div>
        </div>

        <div class="AtBox L">
            <div class="Date"><%Response.Write(FieldService.toTime1(PaText.date_created, "-")); %></div>
            <div class="Pv"><%Response.Write(PaText.count_pv); %></div>
            <div class="Comment"><%Response.Write(PaText.count_comment); %></div>
            <div class="Star"><%Response.Write(PaText.count_star); %></div>
            <div class="Time"><%Response.Write(FieldService.toTime2(PaText.date_changed)); %></div>
            <div class="Archiv"><%Response.Write(PaText.text_archiv); %></div>

            <%foreach (string str in FieldService.toTags(PaText.tags))
                {  %>
            <div class="Tag"><%Response.Write(str); %></div>
            <%} %>
        </div>
    </div>

    <%} %>
</asp:Content>
<%@ Master Language="C#" AutoEventWireup="true" CodeBehind="FRAME.master.cs" Inherits="PILIPALA.pala_custom.theme.field2.cut.FRAME" %>

<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <base target="_blank">
    <title>Thaumy的小破站|又一个码农的家</title>

    <link rel="stylesheet" href="/pala_custom/theme/field2/cut/ui_css/global.css">
    <link rel="stylesheet" href="/pala_custom/theme/field2/cut/ui_css/basic.css">
    <link rel="stylesheet" href="/pala_custom/theme/field2/cut/ui_css/Box.css">
    <link rel="stylesheet" href="/pala_custom/theme/field2/cut/ui_css/Btn.css">

    <link rel="stylesheet" href="/pala_custom/theme/field2/cut/ui_css/more/vs2015.css">


    <script type="text/javascript" src="https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js"></script>
    <script type="text/javascript" src="https://cdn.bootcss.com/jquery-cookie/1.4.1/jquery.cookie.min.js"></script>
    <script type="text/javascript" src="https://cdn.bootcss.com/typed.js/2.0.10/typed.min.js"></script>
    <script type="text/javascript" src="https://cdn.bootcss.com/marked/0.7.0/marked.min.js"></script>
    <script type="text/javascript" src="https://cdn.bootcss.com/highlight.js/9.15.10/highlight.min.js"></script>

    <script type="text/javascript" src="/pala_custom/theme/field2/cut/ui_js/basic.js"></script>
    <script type="text/javascript" src="/pala_custom/theme/field2/web_js/basic.js"></script>
</head>

<body>
    <%List<int> TextIDList = BS.getTextIDList("page"); %>
    <div class="fixed">

        <div class="NavLine L M bSha b50">
            <div onclick="up();showHome()" class="contain cur bRds">
                <div class="Avatar bSha"></div>
                <div class="Name">THAUMY的小站</div>
            </div>
            <div class="SiderBtn R" onclick="ListToggle()"></div>
        </div>

        <div class="SiderList bSha">

            <%if (Request.QueryString["text_id"] == null)
                {
                    foreach (int text_id in TextIDList)
                    { %>
            <div class="Card cur bRds" onclick="up();ListToggle();showText(<%Response.Write(text_id); %>)">
                <div class="contain"><%Response.Write(BS.getTextTitle(text_id)); %></div>
            </div>
            <%}
                }%>

            <div class="Co cur" onclick="up();showText(12388)">
                Thaumy的博客©2016-2019保留所有权利<br>
                基于pilipala构建<br>
                Field Theme Designed By Thaumy<br>
            </div>
        </div>

        <div class="Shadow" onclick="ListToggle()"></div>
        <div class="upBtn bSha bRds b55" style="display: none" onclick="up()"></div>

    </div>

    <div class="contain">
        <div class="NavCol bSha bRds b50">
            <div onclick="up();showHome()" class="contain bRds">
                <div class="Avatar bSha cur"></div>
                <div class="Name">THAUMY的小站</div>
                <div class="JieShao"><span class="jieshao"></span></div>
            </div>

            <div class="List">

                <%if (Request.QueryString["text_id"] == null)
                    {
                        foreach (int text_id in TextIDList)
                        { %>
                <div class="Card cur bRds" onclick="up();showText(<%Response.Write(text_id); %>)">
                    <div class="contain"><%Response.Write(BS.getTextTitle(text_id)); %></div>
                </div>
                <%}
                    }%>
            </div>

            <div class="Co cur" onclick="up();showText(12388)">
                Thaumy的博客©2016-2019保留所有权利<br>
                基于pilipala构建<br>
                Field Theme Designed By Thaumy<br>
            </div>
        </div>

        <div class="CardCol R">
            <asp:ContentPlaceHolder ID="RefreshBlock" runat="server">
            </asp:ContentPlaceHolder>
        </div>

    </div>

    <link rel="stylesheet" type="text/css" href="http://raw.githack.com/Thaumy/Blog/master/build/css/mrks.css">
    <link rel="stylesheet" type="text/css" href="http://raw.githack.com/Thaumy/Blog/master/build/css/wrds.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Noto+Sans+SC:300,400">
    <link rel="stylesheet" href="https://fonts.font.im/css?family=Roboto+Mono">

    <!-- CNZZ -->
    <div style="display: none">
        <script type="text/javascript" src="https://s19.cnzz.com/z_stat.php?id=1262285427&web_id=1262285427"></script>
    </div>
</body>

<script type="text/javascript" src="/pala_custom/theme/field2/cut/ui_js/jieshao.js"></script>


<script type="text/javascript">
    /* 返顶按钮淡入淡出 */
    $(window).scroll(function () {
        if ($(window).scrollTop() > 1000) {
            $(".upBtn").fadeIn(350);
        }
        else {/*  */
            $(".upBtn").fadeOu/*  */t(350);
        }/*  */
    });
</script>

<script type="text/javascript">
    /* 向上滚动NavLine展开 */
    var p = 0; t = 0;
    $(window).scroll(debounce(function () {
        /* 触发宽度 */
        if ($(window).width() <= 1000) {
            p = $(this).scrollTop();
            if (t <= p) {
                /* 防止触发遮住文本首部 */
                if ($(window).scrollTop() >= 20) {
                    $(".NavLine").slideUp(200);
                }
            }
            else {
                /* 触发高度：小于20或大于200 */
                if ($(window).scrollTop() <= 20 | $(window).scrollTop() >= 200) {
                    $(".NavLine").slideDown(150);
                }
            }
            t = p;
        } else {
            $(".NavLine").slideUp(200);
        }
    }, 50))

    /* 触发宽度外，收起NavLine */
    $(window).resize(function () {
        if ($(window).width() > 1000) {
            $(".NavLine").slideUp(200);
        }
    });
</script>

<script type="text/javascript">
    /* 侧边菜单展开 */
    function ListToggle() {
        if ($(".SiderList").css("left") == "-800px") {
            $("body").css("overflow", "hidden");/* 禁用滚动 */

            fadeInX2(".Shadow", function () { });
            $(".SiderBtn").slideUp(300);
            slideRight2X(".SiderList");

        }

        if ($(".SiderList").css("left") == "12px") {
            $("body").css("overflow", "unset");/* 启用滚动 */

            fadeOutX2(".Shadow", function () {
                $(".SiderBtn").slideDown(400);
            });
            slideLeft2X(".SiderList");

        }
    }
</script>

</html>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace PILIPALA.pala_custom.theme.field2.cut
{
    public partial class LIST : System.Web.UI.Page
    {
        /* 创建pala基本服务 */
        protected pala_system.service.Basic BS { get; set; }

        protected void Page_Load(object sender, EventArgs e)
        {
            /* 初始化基本服务 */
            BS = new pala_system.service.Basic();
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

namespace PILIPALA.pala_custom.theme.field2.cut
{
    public partial class FRAME : System.Web.UI.MasterPage
    {
        /* 创建pala基本服务 */
        protected pala_system.service.Basic BS { get; set; }

        protected void Page_Load(object sender, EventArgs e)
        {
            /* 初始化基本服务 */
            BS = new pala_system.service.Basic();
        }
    }
}
<%@ Page
    Title=""
    Language="C#"
    MasterPageFile="~/pala_custom/theme/field2/cut/FRAME.Master"
    AutoEventWireup="true"
    CodeBehind="CONTENT.aspx.cs"
    Inherits="PILIPALA.pala_custom.theme.field2.cut.CONTENT" %>

<%@ Import Namespace="PILIPALA.pala_system.service" %>
<%@ Import Namespace="PILIPALA.pala_custom.theme.field2.web_service" %>

<asp:Content ID="Content1" ContentPlaceHolderID="RefreshBlock" runat="server">
    <div class="Card L M bSha bRds">
        <div class="contain L bRds w250">
            <div class="Title"><%Response.Write(PaText.text_title); %></div>
            <div class="Summary"><%Response.Write(PaText.text_summary); %></div>

            <div class="Content bRds"><%Response.Write(PaText.text_content); %></div>

            <%if (nextTextTitle != null)
                {%>
            <div class="nxtBtn L bRds cur" onclick="up();showText(<%Response.Write(nextTextID); %>)"><%Response.Write(nextTextTitle); %></div>
            <%} %>

            <%if (prevTextTitle != null)
                {%>
            <div class="pvsBtn R bRds cur" onclick="up();showText(<%Response.Write(prevTextID); %>)"><%Response.Write(prevTextTitle); %></div>
            <%} %>

            <script>$(".CardCol>.Card>.contain>.Content").html(marked($(".CardCol>.Card>.contain>.Content").html()));</script>
        </div>

        <!-- 代码高亮启用 -->
        <script>
            hljs.initHighlighting.called = false;
            hljs.initHighlighting();
        </script>

    </div>
    <div class="CoBox L M bSha b50">

        <span class="text_auth L">由<%Response.Write(PaText.text_editor); %>最后编辑于<%Response.Write(FieldService.toTime1(PaText.date_changed, "/")); %></span>
        <span class="text_mId R"><%Response.Write(Basic.toMD5(PaText.text_content).Substring(0, 7)); %></span>

        <div class="AtBox L bRds w250">
            <div class="Date"><%Response.Write(FieldService.toTime1(PaText.date_created, "-")); %></div>
            <div class="Pv"><%Response.Write(PaText.count_pv); %></div>
            <div class="Comment cur"><%Response.Write(PaText.count_comment); %></div>
            <div class="Star cur" onclick="refre_countStar(<%Response.Write(PaText.text_id); %>)"><%Response.Write(PaText.count_star); %></div>
            <div class="Time"><%Response.Write(FieldService.toTime2(PaText.date_changed)); %></div>
            <div class="Archiv"><%Response.Write(PaText.text_archiv); %></div>
            <%foreach (string str in FieldService.toTags(PaText.tags))
                {  %>
            <div class="Tag"><%Response.Write(str); %></div>
            <%} %>
        </div>
    </div>

    <div class="CommentBox L bSha bRds w250">
        <div>评论(暂不可用)</div>
        <div style="font-size: 14px">-comments-</div>
    </div>
</asp:Content>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;

using LibStruct.pilipala;

namespace PILIPALA.pala_custom.theme.field2.cut
{
    public partial class CONTENT : System.Web.UI.Page
    {
        /* 创建pala基本服务 */
        protected pala_system.service.Basic BS { get; set; }
        protected PaText PaText;

        public int text_id;

        public int prevTextID;
        public int nextTextID;

        public string prevTextTitle;
        public string nextTextTitle;

        protected void Page_Load(object sender, EventArgs e)
        {
            /* 如果请求的text_id不为空 */
            if (Request.QueryString["text_id"] != null)
            {
                /* 获得请求的text_id */
                text_id = Convert.ToInt32(Request.Params["text_id"]);

                /* 初始化基本服务 */
                BS = new pala_system.service.Basic();
                /* 合并主次表 */
                PaText = pala_sys<%/*  */tem.service.Basic.fill(BS.getTextMain(text_id), BS.getTextSub(text_id));

                /* 前后文章标题赋值 */
                prevTextID = BS.prevTextID(text_id);
                nextTextID = BS.nextTextID(text_id);

                /* 前后文章标题赋值 */
                prevTextTitle = BS.getTextTitle(prevTextID);
                nextTextTitle = BS.getTextTitle(nextTextID);
            }
        }
    }
}
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// 有关程序集的常规信息通过下列特性集
// 控制。更改这些特性值可修改
// 与程序集关联的信息。
[assembly: AssemblyTitle("PILIPALA")]
[assembly: AssemblyDescription("The best solution for creating high availability websites")]
[assembly: AssemblyConfiguration("beta7")]
[assembly: AssemblyCompany("H2OMELON'SOCIE")]
[assembly: AssemblyProduct("PILIPALA BETA7 'Kaguya'")]
[assembly: AssemblyCopyright("Copyright © 2019 H2OMELON'SOCIE All Rights Reserved")]
[assembly: AssemblyTrademark("PILIPALA")]
[assembly: AssemblyCulture("")]

// 将 ComVisible 设置为 false 会使此程序集中的类型
// 对 COM 组件不可见。如果需要
// 从 COM 访问此程序集中的某个类型，请针对该类型将 ComVisible 特性设置为 true。
[assembly: ComVisible(false)]

// 如果此项目向 COM 公开，则下列 GUID 用于 typelib 的 ID
[assembly: Guid("c775b994-90e0-4713-ba29-6e8ca3b8bb90")]

// 程序集的版本信息由下列四个值组成:
//
//      主版本
//      次版本
//      内部版本号
//      修订版本
//
// 可以指定所有值，也可以使用“修订号”和“内部版本号”的默认值，
// 方法是按如下所示使用 "*":
[assembly: AssemblyVersion("0.7.0.0")]
[assembly: AssemblyFileVersion("0.7.0.0")]
.mk-bug {
    background: rgba(205, 21, 84, 1.00);
}

.mk-dbg {
    background: rgba(0, 167, 0, 1.00)
}

.mk-dt {
    font-family: 'Roboto Mono', monospace;
    font-weight: 300;
    color: #FFFFFF;
    border-radius: 4px;
    font-size: 16px;
    padding-left: 5px;
    margin-right: 4px;
    background: rgba(70, 70, 70, 1.00);
}

.mk-updt {
    background: rgb(150, 80, 180);
}

.mk-mtn {
    background: rgba(236, 146, 17, 1.00);
}

.mk-w {
    background: rgb(0, 120, 120);
}

.mk-ui {
    background: rgba(12, 143, 185, 1.00);
}

.mk-w,
.mk-bug,
.mk-dbg,
.mk-updt,
.mk-mtn,
.mk-ui {
    font-family: 'Roboto Mono', monospace;
    color: #FFFFFF;
    border-radius: 4px;
    margin-left: 5px;
    padding-left: 5px;
    padding-right: 5px;
    font-size: 16px;
}

.mk-w::before {
    content: "W";
}

.mk-bug::before {
    content: "!";
}

.mk-dbg::before {
    content: "DBG";
}

.mk-updt::before {
    content: "UPDT";
}

.mk-mtn::before {
    content: "MTN";
}

.mk-ui::before {
    content: "UI";
}
a.wd-linked {
    color: #FFFFFF;
}
a.wd-linked:link {
    background: rgba(12,193,185,1.00);
    padding-left: 1%;
    padding-right: 1%;
    border-radius: 4px;
    text-decoration: inherit;
}
a.wd-linked:hover {
    color: #2200FF;
    background: rgba(12,193,185,0.60);
    text-decoration: inherit;
}
.wd-heimu {
    padding-left: 1%;
    padding-right: 1%;
    border-radius: 4px;
    color: rgba(73,73,73,1.00);
    background: rgba(73,73,73,1.00);
}
.wd-heimu:hover {
    color: #FFFFFF;
}
.wd-dt1,.wd-dt2,.wd-dt3,.wd-dt4{
	font-size: 15px;
	color: rgba(255,255,255,1.00);
	padding-left: 4px;
	padding-right: 4px;
	border-top-left-radius: 2px;
    border-top-right-radius: 2px;
    border-bottom-left-radius: 2px;
    border-bottom-right-radius: 2px;
}

.wd-dt1 {
    background:rgba(27,128,212,1.00);
}
.wd-dt2 {
    background:rgba(0,167,0,1.00);
}
.wd-dt3 {
    background:rgba(217,25,114,1.00);
}
.wd-dt4 {
    background:rgba(134,95,197,1.00);
}
.wd-imgfull>img{
	width: 100%;
}